<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NomoLog]]></title>
  <link href="http://r-nmt000.github.io/atom.xml" rel="self"/>
  <link href="http://r-nmt000.github.io/"/>
  <updated>2014-06-07T01:22:04+09:00</updated>
  <id>http://r-nmt000.github.io/</id>
  <author>
    <name><![CDATA[r-nmt000]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressで謎のLiquid Exception]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/06/07/octopress/"/>
    <updated>2014-06-07T01:13:24+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/06/07/octopress</id>
    <content type="html"><![CDATA[<p>久しぶりにブログ書いて<code>rake generate</code>したら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Liquid Exception: undefined method `sort!' for nil:NilClass in ... </span></code></pre></td></tr></table></div></figure>


<p>なるエラーで怒られた。</p>

<!-- more -->


<p>ググると<a href="http://daisukekobayashi.com/blog/escape-liquid-template-tags-in-octopress">Liquidタグをエスケープする</a>という記事があったけどそんなタグ使った覚えがない。</p>

<p>なんでだろうとよくよく調べると前回書きかけの記事のマークダウンファイルを、通常は<code>source/_post</code>以下に置くところを<code>source/tmp</code>フォルダを作ってそこに避けて置いたのを見つけた。で、これを外に除けたらエラーが消えた。</p>

<p>なんかよくわからんけど、よかったよかった(<em>^^</em>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My favorite mottoes]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/06/07/others/"/>
    <updated>2014-06-07T00:39:14+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/06/07/others</id>
    <content type="html"><![CDATA[<h1>座右の銘</h1>

<p>エンジニアとして、いつも心に留めておこうと思う言葉。</p>

<!-- more -->


<blockquote><p>It is not the strongest of the species that survive, nor the most intelligent but the ones most responsive to change.</p>

<p>生き残るのは最も強い者でも最も賢い者でもない。最も変化に適応できる者だ。</p>

<p>(Charles Robert Darwin)</p></blockquote>

<p>そして、</p>

<blockquote><p>Shut the fxxk up and write some code.</p>

<p>ぐだぐだ言ってないでコードを書けよ、ハゲ。</p>

<p>(ゆーすけべー)</p></blockquote>

<p>どっちも大切なことだね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TerminalからiTerm2に乗り換えたらVimの色表示が狂った話]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/04/10/vim/"/>
    <updated>2014-04-10T13:45:17+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/04/10/vim</id>
    <content type="html"><![CDATA[<p><img src="http://r-nmt000.github.io/images/iterm2.jpg" alt="iterm2" /></p>

<p>iTerm2は縦にウィンドウ分割できてアツい！って聞いたので乗り換えたところ
Vimの背景が白っぽくなってすごい見づらくなってしまった問題を解決したときの備忘録です。</p>

<!-- more -->


<h2>問題発生までの流れ</h2>

<ol>
<li>iTerm2を入れる</li>
<li>iTerm2でカラースキームの設定ができることを知りやってみる</li>
<li>zshが見やすくなってうはうは</li>
<li>vimを開いたところ背景が白っぽくなり見づらい</li>
<li>vimの設定を変更するも問題解決できず</li>
</ol>


<h2>解決方法</h2>

<p>iTerm2の<code>Preference</code>→<code>Colors</code>の画像の部分の色を調整することで修正できました。</p>

<p><img src="http://r-nmt000.github.io/images/iterm.jpg" alt="iTerm2" /></p>

<p>普通だったら背景のところには<code>Background</code>に指定してある色がくるはずなのですが、
vimでは反映されず代わりに<code>Black</code>で指定されている色が反映されているようでした。</p>

<p>そのため僕がiTerm2で設定したカラースキームでは薄い黒が<code>Black</code>に指定されていたので、今回のようなことが起きたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SBT Libraries and Plugins]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/04/08/scala-sbt/"/>
    <updated>2014-04-08T00:10:53+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/04/08/scala-sbt</id>
    <content type="html"><![CDATA[<h1>ある日のぼく</h1>

<p><strong>ぼくはSBTのプラグインを入れようとしていました。</strong></p>

<p>ぼく「sbteclipse-plugin入れたいなあ^^ なになに、<code>project/plugins.sbt</code>に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resolvers += Classpaths.typesafeResolver
</span><span class='line'>
</span><span class='line'>addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.4.0"</span></code></pre></td></tr></table></div></figure>


<p>って書けばいいのかなるほど！」</p>

<p>ぼく「でも<code>"com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.4.0"</code>って<code>project/Build.scala</code>の<code>LibraryDependencies</code>と同じ書式だけどこっちに書いちゃダメなのかなあ。書いてみよう！」←動かず</p>

<p>ぼく「てかそもそも<code>project/plugins.sbt</code>とか<code>project/Build.scala</code>とか<code>Build.sbt</code>とかなんなんだっけ？どういう関係だっけ？調べてみよう！」</p>

<!-- more -->


<h2><a href="http://scalajp.github.io/sbt-getting-started-guide-ja/">ここ</a>に全て書いてあるけど自分なりにまとめたよ！</h2>

<p>SBTのビルド定義やらライブラリの依存性やら何度勉強しても忘れるのでここで一発まとめちゃおうと思います！！</p>

<p>今回は以下のディレクトリ構造を想定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello/
</span><span class='line'> build.sbt
</span><span class='line'>
</span><span class='line'> project/
</span><span class='line'>  Build.scala
</span><span class='line'>  plugins.sbt</span></code></pre></td></tr></table></div></figure>


<h3>ライブラリ？プラグイン？</h3>

<p>そもそも今回の問題は自分の中でライブラリとプラグインの定義が曖昧だったことが始まりでした。SBTで言うところのプラグインの追加とは、</p>

<blockquote><p><strong>ビルド定義にライブラリ依存性を追加することを意味する。</strong></p></blockquote>

<p>らしいです。</p>

<p>SBTではプロジェクト(上記のhelloとします)のビルド定義は<code>build.sbt</code>と<code>project/Build.scala</code>に記述します。各ファイルにプロジェクト名やScalaのバージョンやビルドスルために必要なライブラリを書いてあげることをビルド定義と呼ぶわけです。</p>

<p>そしてプラグインとはこのビルド定義の拡張に他なりません。他ならないそうです。</p>

<p>ですので、<strong>このビルド定義に対してまたビルド定義</strong>してあげることがプラグインの追加になるそうです。</p>

<h2>SBTの再帰構造</h2>

<p>SBTではビルド定義自体をまたプロジェクトとして扱うことができます。つまり、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello/
</span><span class='line'> build.sbt
</span><span class='line'>
</span><span class='line'> project/
</span><span class='line'>  Build.scala
</span><span class='line'>  plugins.sbt
</span><span class='line'>  project/
</span><span class='line'>   Build.scala
</span><span class='line'>   plugins.sbt   
</span><span class='line'>   project/
</span><span class='line'>    Build.scala
</span><span class='line'>    plugins.sbt   
</span><span class='line'>      ...</span></code></pre></td></tr></table></div></figure>


<p>な感じでビルド定義のビルド定義のビルド定義の&hellip;みたいなことができちゃうわけです。</p>

<p>ようは<code>build.sbt</code>と<code>plugins.sbt</code>は役割的には同じなわけです。ただ、対象とするプロジェクトが異なりますということです。</p>

<h2>まとめ</h2>

<p>書いてたら眠くなったのでこの辺にしときます！</p>

<p>SBTプロジェクト内のファイル関係はこれである程度頭に入ったはず！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala + akka]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/04/02/scala-akka/"/>
    <updated>2014-04-02T01:10:16+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/04/02/scala-akka</id>
    <content type="html"><![CDATA[<h1>Scalaのakkaを試してみた</h1>

<p><img src="http://r-nmt000.github.io/images/akka.jpg" alt="akka" /></p>

<p>そういやScala始めてしばらくになるけどakka触ったことなかったなあこれはやばいなあということでちょっと勉強してみました。</p>

<!-- more -->


<h2>akkaって？</h2>

<p>Scala2.10から公式に標準装備された並列分散処理のためのScala, Java用フレームワークだそうです。</p>

<p><a href="http://akka.io/">akka公式サイト</a></p>

<h2>じゃあ使ってみよう</h2>

<p><a href="http://akka.io/docs/">akka公式サイト</a>によると最新バージョンは2.3.1だそうな、ふむふむ&hellip;さっそく<a href="http://doc.akka.io/docs/akka/2.3.1/intro/getting-started.html">Gettinng Started</a>をやってみるか</p>

<p>Akka 「Akkaを勉強する一番いい方法はTypesafe Activatorをダウンロードしてテンプレートを試すことだよ^^ 」</p>

<p>ぼく 「あ、そうなの？じゃあそれ試してみよう」</p>

<p>一時間後&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>　　　　　　　 ＿＿＿_
</span><span class='line'>　　　　　　／　　 　 　＼　
</span><span class='line'>　　　　 ／　　─　 　 ─   ＼  全然わからねえ...
</span><span class='line'>　　　／ 　　 （○） 　（○） ＼
</span><span class='line'>　 　 |　 　　 　 （__人__） |　　 ＿＿＿＿＿＿＿＿＿__
</span><span class='line'>　　　＼　　　 　 ｀ ⌒´　　,／　.| |　　　　　　　 　　|
</span><span class='line'>　　　ノ　　　　　　　　　　　＼ .| |　　　　　　　 　　|
</span><span class='line'>.　／´　　　　　　　　 　 　 　  | |　　　　    　  　 |
</span><span class='line'>　|　　　　ｌ　　　　　　　　　   | |　　　　　　　 　　|
</span><span class='line'>　ヽ　　　 -一ー_~､⌒)^),-､　　  .|_|_＿＿＿＿_＿＿＿＿_|
</span><span class='line'>　　ヽ ＿＿＿＿,ノγ⌒ヽ)ニニニニ　   　 ＿|_|＿_|＿</span></code></pre></td></tr></table></div></figure>


<p>なんだよソースだけ渡されてもわかんねーよ！！もっと言葉で伝えてくれなきゃわかんねーよオレを誰だと思ってんだ！！ヾ(<em>｀Д´</em>)ﾉ&#8221;</p>

<p>てな感じで悪戦苦闘してググるも、なかなかよい情報が見つからず&hellip;</p>

<p>で、よくよくみたら<a href="http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html">akka 2.0.2</a>ではπを求める計算をサンプルに非常に丁寧に説明されていた&hellip;このチュートリアルでいいじゃん&hellip;なんでTypesafe Activatorとかいうのインストールさせたんだよクソが&hellip;</p>

<p>とか思いつつバージョンが微妙に古いので上手く行かなかったりで適宜書き換えつつ、サンプルを使ってお勉強しました。なるほど、大まかな流れはつかめたぞ！</p>

<p>個人的にポイントだなと感じたのは以下の点です！<a href="http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html">akka 2.0.2</a>を読みながら(むしろそちらメインで)読んでいただくと非常にわかりやすいかと！</p>

<ol>
<li>Actor</li>
<li>メッセージパッシング</li>
<li>ルータ</li>
</ol>


<h2>Actor</h2>

<p>akkaの並列処理では<code>Actor</code>というものを使うそうです。Actorとは、Javaの並列処理というで使うスレッドをイメージしてもらえればオッケーかと思います。ただしActorを特徴づけるのが、Actorがお互いにメッセージのやりとりをして処理を進めていく点です。</p>

<h2>メッセージパッシング</h2>

<p>Actorはメッセージのやりとりをして処理を進めていくと書きましたが、そのための仕組みがメッセージパッシングです。ちょっとサンプルソースを見てみましょう。(今気づいたけどPiApproximationはPiMessage継承してないけどいいのかな&hellip;一応動いちゃいるけども)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Calculate</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Work</span><span class="o">(</span><span class="n">start</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Result</span><span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">PiApproximation</span><span class="o">(</span><span class="n">pi</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">duration</span><span class="k">:</span> <span class="kt">Duration</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記ではπの計算に使うメッセージを定義しています。パターンマッチで使うので<code>case class</code>で宣言しているようです。
それぞれのメッセージはそれぞれ次のActor間で使用されます。</p>

<table>
<thead>
<tr>
<th> </th>
<th> Actor        </th>
<th align="center"> 役割           </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td> </td>
<td> Worker      </td>
<td align="center"> 実際に計算を行なう</td>
<td></td>
</tr>
<tr>
<td> </td>
<td> Master      </td>
<td align="center"> 処理の起点、Workerの計算結果をまとめる</td>
<td>  </td>
</tr>
<tr>
<td> </td>
<td> Listener    </td>
<td align="center"> 結果をprintする      </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>こちらがActorの定義です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Worker</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="k">def</span> <span class="n">calculatePiFor</span><span class="o">(</span><span class="n">start</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span><span class="k">:</span><span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="n">acc</span> <span class="k">=</span> <span class="mf">0.0</span>
</span><span class='line'>   <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">start</span> <span class="n">until</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">nrOfElements</span><span class="o">))</span>
</span><span class='line'>     <span class="n">acc</span> <span class="o">+=</span> <span class="mf">4.0</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span><span class="o">-</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>   <span class="n">acc</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Work</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>   <span class="n">sender</span> <span class="o">!</span> <span class="nc">Result</span><span class="o">(</span><span class="n">calculatePiFor</span><span class="o">(</span><span class="n">start</span><span class="o">,</span><span class="n">nrOfElements</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各ActorはActorクラスを継承して定義します。
注目して欲しいのがreceiveメソッドです。receiveメソッドはそのActorがなんらかのメッセージを受け取った時に呼ばれるメソッドです。パターンマッチを使用でき、
メッセージの種類に応じて処理を変えることができます。</p>

<p>メッセージの送信は、<code>!</code>を使って</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">master</span> <span class="o">!</span> <span class="n">culculate</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように行います。master Actorにculculateメッセージを送るという意味です。</p>

<p>メッセージを受け取ってから処理を送信者へ返す場合は<code>sender</code>が予約されているのでそれを使いましょう。</p>

<p>ちなみにメッセージは無理に定義しなくてもIntとかStringとかも使えるようです。</p>

<h2>ルータ</h2>

<p>Master内でこのルータを宣言しています。ルータはそれぞれのWorkerに等しい量のタスクを振り分けるのに使われているようです。</p>

<p>この辺はもうちょっと勉強がいりますが、要はMasterがWorkerを作り各Workerに処理を振り分けているということだと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Master</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfMessages</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">listener</span><span class="k">:</span> <span class="kt">ActorRef</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">pi</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">nrOfResults</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">val</span> <span class="n">workerRouter</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">Worker</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">RoundRobinRouter</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="o">)),</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;workerRouter&quot;</span><span class="o">)</span>
</span><span class='line'>              
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// handle messages ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>                                  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>全体の流れ</h2>

<p>全体の流れはこんな感じです。</p>

<ol>
<li>処理に必要なActorを定義する(今回はMaster,Worker,Listener)</li>
<li>Actor間のやりとりに必要なメッセージを定義する</li>
<li>Masterが処理の起点、各Workerの処理を割り振る</li>
<li>Workerの処理が全て終わったら結果をマージ、Listenerへ投げる</li>
<li>Listenerで結果表示(Listenerってなんでいるんだろう&hellip;?）</li>
</ol>


<p>以下が全ソースコードです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.routing._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Calculate</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Work</span><span class="o">(</span><span class="n">start</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Result</span><span class="o">(</span><span class="n">value</span><span class="k">:</span><span class="kt">Double</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">PiApproximation</span><span class="o">(</span><span class="n">pi</span><span class="k">:</span><span class="kt">Double</span><span class="o">,</span> <span class="n">duration</span><span class="k">:</span><span class="kt">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Worker</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">calculatePiFor</span><span class="o">(</span><span class="n">start</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span><span class="k">:</span><span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">acc</span> <span class="k">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">start</span> <span class="n">until</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">nrOfElements</span><span class="o">))</span>
</span><span class='line'>      <span class="n">acc</span> <span class="o">+=</span> <span class="mf">4.0</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span><span class="o">-</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">acc</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Work</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sender</span> <span class="o">!</span> <span class="nc">Result</span><span class="o">(</span><span class="n">calculatePiFor</span><span class="o">(</span><span class="n">start</span><span class="o">,</span><span class="n">nrOfElements</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Master</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span><span class="n">nrOfMessages</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="nc">Listener</span><span class="k">:</span><span class="kt">ActorRef</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">pi</span><span class="k">:</span><span class="kt">Double</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">nrOfResults</span><span class="k">:</span><span class="kt">Int</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span><span class="k">:</span><span class="kt">Long</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">workersRouter</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">Worker</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">RoundRobinRouter</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="o">)),</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;workersRouter&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Calculate</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">nrOfMessages</span><span class="o">)</span> <span class="n">workersRouter</span> <span class="o">!</span> <span class="nc">Work</span><span class="o">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">nrOfElements</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Result</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">pi</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class='line'>      <span class="n">nrOfResults</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">nrOfResults</span> <span class="o">==</span> <span class="n">nrOfMessages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="nc">Listener</span> <span class="o">!</span> <span class="nc">PiApproximation</span><span class="o">(</span><span class="n">pi</span><span class="o">,</span> <span class="n">duration</span> <span class="k">=</span> <span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">-</span> <span class="n">start</span><span class="o">))</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="n">stop</span><span class="o">(</span><span class="n">self</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Listener</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">PiApproximation</span><span class="o">(</span><span class="n">pi</span><span class="o">,</span> <span class="n">duration</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Pi approximation: %s\nCalculation time: %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">pi</span><span class="o">,</span><span class="n">duration</span><span class="o">))</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">object</span> <span class="nc">AkkatestApp</span><span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span><span class="kt">Unit</span>  <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">input</span> <span class="k">=</span> <span class="n">readLine</span><span class="o">(</span><span class="s">&quot;1:sequence 2:parallel\n&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">&quot;1&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">calculate</span><span class="o">(</span><span class="n">nrOfWorkers</span> <span class="k">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">nrOfElements</span> <span class="k">=</span> <span class="mi">10000</span><span class="o">,</span> <span class="n">nrOfMessages</span> <span class="k">=</span> <span class="mi">10000</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">calculate</span><span class="o">(</span><span class="n">nrOfWorkers</span> <span class="k">=</span> <span class="mi">4</span><span class="o">,</span> <span class="n">nrOfElements</span> <span class="k">=</span> <span class="mi">10000</span><span class="o">,</span> <span class="n">nrOfMessages</span> <span class="k">=</span> <span class="mi">10000</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;wrong num&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">calculate</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfMessages</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">&quot;PiSystem&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">listener</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">Listener</span><span class="o">],</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;listener&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">master</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Master</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="o">,</span> <span class="n">nrOfMessages</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="o">,</span> <span class="n">listener</span><span class="o">)),</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;master&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">master</span> <span class="o">!</span> <span class="nc">Calculate</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>こちらが今回参考にさせていただいたサイトです。</p>

<p><a href="http://labs.enrapt.jp/2013/03/scalaakka.html">SclaのAkka入門</a></p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1209/06/news134.html">Scalaの並行処理とアクター、並列コレクション</a></p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1209/06/news134.html">Scala + akka で簡単なチャットサーバを書いてみたので開設してみるよ</a></p>

<p><a href="http://tuvistavie.com/posts/6-getting-started-with-scala-akka-actors?locale=ja">Scalaのakka actorsを使いはじめる</a></p>

<p>まだまだakkaの入り口に立った程度ですがこの程度のことでも情報がなくてかなり時間がかかってしまった&hellip;</p>

<p>もっと頑張って勉強します！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The most efficient way of learning English]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/03/24/english/"/>
    <updated>2014-03-24T10:53:53+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/03/24/english</id>
    <content type="html"><![CDATA[<h1>ぼくのかんがえるさいきょうのえいごがくしゅうほう(｀･ω･´)ゞ</h1>

<p>最近気になる２つの記事を見つけました。</p>

<p><a href="http://hatebu.mekepo.com/item/328777">子どもの中学入学祝いに敢えて高校生用電子辞書を買ったら教師から電子辞書禁止の通達ががが</a></p>

<p><a href="http://lrandcom.com/facebook_former_executive_learning_programming_guarantee_life_time_work">Facebook元役員「プログラミングを学ぶのなら、生涯仕事に困らないことを私が保証しよう。」</a></p>

<!-- more -->


<p>前者はタイトル通り電子辞書を子供にプレゼントしたら英語教師から”電子辞書使うな！紙の辞書を推奨する！”って言われましたよーって話。</p>

<p>後者は色々な著名人がプログラミングの有用性を説いていますって話です。</p>

<p>一見関係ない２つの記事ですが、僕はこの２つの記事から感じたことがありました。</p>

<p>まず１つ目の記事ですが。自分が中学、高校生の時にも紙の辞書の有用性を説く大人はいました。彼ら曰く紙の辞書は</p>

<ol>
<li>書き込める。メモを残しておけるので復習に役立つ</li>
<li>目的の単語の前後にある単語も目に入るので、より多くの単語を学べる</li>
<li>紙をめくり苦労してその単語にたどり着くことでその単語が記憶により定着する</li>
</ol>


<p>といったメリットがあるそうです。多分他にもメリットはあるんでしょう。上記の英語教師の主張も似たようなとこじゃないでしょうか。</p>

<p>声を大にして言いたい。もうね、アホかと。</p>

<p>1番目のメリットに関して言えばまあ確かに電子辞書じゃメモ残すのは難しいかもしれないけど（メモ機能がついてる電子辞書もあるらしいですが）2番目に関して言えば電子辞書でもできるし、3番目に関しては何を根拠にそんなことを主張しているんだという感じですよね。</p>

<p>基本的に物事を覚えるってことは復習、繰り返しがものを言うんです。記憶したことを如何に多く復習するか、如何に適切なタイミングで復習するかが記憶への定着の鍵となります。</p>

<p>参考までに。
<a href="http://ja.wikipedia.org/wiki/%E5%BF%98%E5%8D%B4%E6%9B%B2%E7%B7%9A">エビングハウスの忘却曲線</a></p>

<p>だから、10秒かけて1単語調べるなら3秒で3回その単語を調べた方がいいに決まってるんです！</p>

<p>で、まあ僕はデジタル人間なのでアナログ派に思いっきり喧嘩売りますけど紙で覚える！とか言ってる奴はオワコンですよ！今すぐそれまでの人生を悔い改めデジタルへの以降を検討したほうがいいです。（いや僕も紙はもちろん使いますけどね、それだけじゃ絶対ダメだと思うんです）</p>

<p>かといってじゃあ電子辞書でいいのかと言えばそうでもなくて、まだ足りない。紙よりはいいけどもっといい方法はある。今は色んなwebサービスがありますし、スマートフォンアプリもありますし、<strong>プログラミング</strong>もできますし。</p>

<p>この辺から2つ目の記事につながっていくわけですが。</p>

<p>2つ目の記事では様々な人が様々な視点から様々なプログラミングができることの有用性を説いています。</p>

<ol>
<li>将来あなたはオタクの下で働くんだからオタクには優しくしておくべき</li>
<li>プログラミングを学ぶことは、あなたの未来でなくアメリカの未来がかかっている</li>
<li>プログラマは不足しており、優秀なプログラマは好待遇で受け入れられる</li>
<li>プログラマでなかったとしても、システムがどう動いているかを知らない人間は雇われないだろう</li>
<li>プログラミングを学ぶことは法律を学ぶようなものだ。情報工学は一般教養だ</li>
</ol>


<p>こんなとこです。プログラミングマンセーって話です。</p>

<h2>早く最強の英語学習法教えろよ</h2>

<p>そうです。ここまでタイトルと全然関係ないことを書いてきました。いきなり話が飛びますがここで僕が実践していた英語学習法をご紹介したいと思います。</p>

<p>僕は英単語と日常会話で使うショートフレーズの学習をITの力で最適化しました。使うのは次のサービスです。</p>

<h3>Real英会話</h3>

<iframe src="http://spsns.net/tools/app.php?url=https://itunes.apple.com/jp/app/real-ying-hui-hua/id373563219?mt=8" width="450" height="250" frameborder="0"></iframe>


<p>まずは英フレーズから。ご存知の方も多いかもしれません、<strong>Real英会話</strong>です！！
このアプリ、何が素晴らしいって実際にネイティブが日常会話でよく使うフレーズを、どういうシチュエーションで使うかまでを学習できるのです！！
例えば&#8221;That&rsquo;s all I could do. &ldquo;というフレーズだったら、</p>

<p>&ldquo;Hey, this is only half done. Where&rsquo;s the rest?&rdquo;</p>

<p>&ldquo;Sorry, I had no time. That&rsquo;s all I could do&rdquo;</p>

<p>このように、短い会話の中でどのようにそのフレーズを使うかを学習できます！
しかも、さらに凄いのが毎日新しいフレーズが更新されるので終わりなく学習を続けることができるのです！2014年３月現在で恐らく4000近いフレーズを学習できます！もう最高です！
ただひとつ残念なのが、アプリが非常に<strong>復習しづらい</strong>作りになっている点です。コンテンツが素晴らしいだけに非常に残念です&hellip;</p>

<h3>Weblio</h3>

<p><img src="http://r-nmt000.github.io/images/weblio.jpg" alt="weblio" /></p>

<p>Weblioは最強のオンライン辞書です。何が素晴らしいって、&#8221;単語の意味を調べる&#8221;ってことへの負担を極限まで減らしたオンライン辞書になっている点です。</p>

<ul>
<li><a href="http://english-hacker.jp/weblio">英語学習者必見！超便利な無料オンライン辞書『Weblio』をフル活用する5つの機能</a></li>
<li><a href="http://yuma-z.com/blog/2013/03/weblio/">英語を学ぶなら電子辞書なんて捨ててWeblioの「マイ単語帳」を使おう！</a></li>
</ul>


<p>ChromeのExtensionやAdobe Readerのプラグインを使えばわからない単語を選択するだけでポップアップで単語の意味を調べることができます！
更にWeblioには単語帳作成機能があり、調べた単語を単語帳に登録することができます！そうすることで自分のわからない単語だけを選んだオリジナルの単語帳を作ることができます！
ただやはり、<strong>その単語帳の復習が若干残念&hellip;</strong> 出題順がランダムか登録順でしか選べないのです&hellip;</p>

<h3>Anki</h3>

<iframe src="http://spsns.net/tools/app.php?url=https://itunes.apple.com/jp/app/ankimobile-flashcards/id373493387?mt=8" width="450" height="250" frameborder="0"></iframe>


<p>上記２サービスが抱える問題&hellip; それは復習がしづらいという点です。その問題を解決するため、このAnkiというサービスを使います。
AnkiはiPhone,Android,PCに対応したフラッシュカード作成サービスです。ざっくりメリットを書くと</p>

<ul>
<li>最強のフラッシュカード作成アプリ</li>
<li>エビングハウスの忘却曲線に添って適切なタイミングで問題を出題してくれる</li>
<li>CSV形式でのインポート・エクスポートが可能</li>
<li>画像・音声にも対応</li>
<li>スマホ、PCで学習でき、クラウドでフラッシュカードや学習進捗を同期できる</li>
</ul>


<p>と言ったところです。詳細については<a href="http://ankisrs.net/">オフィシャルサイト</a>や<a href="http://matome.naver.jp/odai/2134774118539693701">まとめサイト</a>をチェックしてください。</p>

<h2>どう組み合わせるの？</h2>

<p>ここからはこれらのサービスをどう組み合わせるのかをご説明します。各サービスの使い方は既知のものとします。まずは簡単なWeblio+Ankiから。</p>

<h3>STEP1 Weblioの単語帳ページへ行く</h3>

<p>まずはWeblioのアカウントを作り、以下の画像のようにある程度単語を自分の単語帳ページに登録しましょう。</p>

<p><img src="http://r-nmt000.github.io/images/weblio_words.jpg" alt="weblio" /></p>

<p>この単語帳は宝の山です。なぜなら自分のわからない単語だけをまとめてある上に、発音、発音記号、訳、例文といろんな情報が１つにまとまっているからです。
これがAnkiで勉強できたらどんなに幸せでしょうか。<strong>やりましょう!!!</strong></p>

<h3>STEP2 Bookmarkletを発動する</h3>

<p>は？ブックマークレットってなんだよ？って方は<a href="http://www.lifehacker.jp/2013/04/130402bookmarklet_matome.html">こちら</a></p>

<p>上記の単語帳ページで、以下のブックマークレットを発動します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">javascript</span><span class="o">:</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>  <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;table.tngMainT tr&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>    <span class="kd">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>    <span class="kd">var</span> <span class="nx">pronanciation</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>    <span class="kd">var</span> <span class="nx">translation</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>    <span class="kd">var</span> <span class="nx">Esentence</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>    <span class="kd">var</span> <span class="nx">Jsentence</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;th,td&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>      <span class="kd">var</span> <span class="nx">cn</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">);</span>      <span class="k">return</span><span class="o">!</span><span class="nx">cn</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/tngMain[TH](VC|SH|SS|TS|CL|MK|CK|DT|LV|TG)/i</span><span class="p">);</span>    <span class="p">}).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>      <span class="kd">var</span> <span class="nx">cn</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">);</span>      <span class="k">if</span><span class="p">(</span><span class="nx">cn</span> <span class="o">==</span> <span class="s2">&quot;tngMainTSR&quot;</span><span class="p">){</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.tngMainTSRH&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>        <span class="nx">line</span> <span class="o">+=</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\&quot;/g</span><span class="p">,</span><span class="s1">&#39;\&quot;\&quot;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&quot;;&#39;</span><span class="p">;</span><span class="nx">line</span> <span class="o">+=</span> <span class="nx">pronanciation</span><span class="o">+</span><span class="nx">translation</span><span class="p">;});</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.tngMainTSRFL&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>  <span class="nx">line</span> <span class="o">+=</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\&quot;/g</span><span class="p">,</span><span class="s1">&#39;\&quot;\&quot;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&quot;;&#39;</span><span class="p">;});}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">cn</span> <span class="o">==</span> <span class="s1">&#39;tngMainTHT&#39;</span><span class="p">){</span>          <span class="nx">pronanciation</span> <span class="o">=</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\&quot;/g</span><span class="p">,</span><span class="s1">&#39;\&quot;\&quot;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&quot;;&#39;</span><span class="p">;}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">cn</span> <span class="o">==</span> <span class="s1">&#39;tngMainTIM&#39;</span><span class="p">){</span>          <span class="nx">translation</span> <span class="o">=</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\&quot;/g</span><span class="p">,</span><span class="s1">&#39;\&quot;\&quot;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&quot;;&#39;</span><span class="p">;}</span>     <span class="p">});</span>     <span class="nx">text</span> <span class="o">+=</span> <span class="nx">line</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/,$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;\r\n&#39;</span><span class="p">;</span>  <span class="p">});</span>  <span class="k">if</span><span class="p">(</span><span class="nx">text</span><span class="p">){</span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#csv&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="s1">&#39;&lt;textarea id=&quot;csv&quot;style=&quot;width:100%;height:10em;&quot;&gt;&lt;/textarea&gt;&#39;</span><span class="p">);</span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#csv&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>  <span class="p">}})()</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると！！！</p>

<p>ページ上部にCSV形式の単語列が現れます！！(単語列は僕好みの配列なので、変更したければ上記javascriptを自由に書き換えて下さい^^)</p>

<p><img src="http://r-nmt000.github.io/images/weblio_words2.jpg" alt="weblio" /></p>

<h3>STEP3 CSVファイルをインポートする</h3>

<p>あとは上記の単語列をテキストファイルにコピペしてCSVファイルを作り、Ankiのインポート機能を使ってインポートすれば完成です！！簡単！！</p>

<hr />

<p>次はReal英会話＋Ankiです。</p>

<p>こいつは少し複雑かつ、注意してほしいことがあります。</p>

<p>それは、ツールを使ってアプリ内の音声データと文言データを抜き取るため、Appleの定める規約に違反する可能性があります。一応バックアップという大義名分はあるようですが、グレーなのは間違いないのでくれぐれも<strong>自己責任</strong>でお願いしますm(<em> </em>)m</p>

<h3>STEP1 iFunBoxで音声データとplistファイルをPCにコピーする</h3>

<p>iFunBoxの使い方は<a href="http://note.chiebukuro.yahoo.co.jp/detail/n79814">このへん</a>を参考にしてください。</p>

<p>何はともあれ、iFunBoxでReal英会話内の全音声データ(cafファイル)とUserPhraseDictionary.plistをコピーしてきましょう。</p>

<p>EnglishGardenIkashitaEigo フォルダにはデフォルトで入っているReal英会話のフレーズ音声データが入っています。また、Documentsフォルダには追加で更新されるフレーズの音声データが入っています。</p>

<p><img src="http://r-nmt000.github.io/images/ifunbox1.jpg" alt="ifunbox" /></p>

<p>UserPhraseDictionary.plistはDocumentsフォルダ以下に入っています</p>

<p><img src="http://r-nmt000.github.io/images/ifunbox2.jpg" alt="ifunbox" /></p>

<h3>STEP2 Java実行環境を用意し、jarファイルを実行する</h3>

<p>Javaってなんだよ！って方は<a href="http://sunjava.seesaa.net/category/3496255-1.html">こちら</a></p>

<p>このあたりを参考にしつつ、シェルから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">java</span> <span class="o">-</span><span class="nx">jar</span> <span class="nx">real_anki</span><span class="p">.</span><span class="nx">jar</span>
</span></code></pre></td></tr></table></div></figure>


<p>が実行できる環境を整えて下さい。</p>

<p>jarファイルは<a href="http://r-nmt000.github.io/download/real_anki.jar">こちら</a>に置いてあります。</p>

<p>このreal_anki.jarと同じ階層に先ほどのUserPhraseDictionary.plistを置き、上記のコマンドを実行すると
plistをパースしてcsv形式でファイルを作ってくれます。</p>

<p>ソースは<a href="https://github.com/r-nmt000/real_anki">こちら</a>に置いてあります。</p>

<h3>STEP3 音声ファイル(cafファイル)をmp3形式に変更する</h3>

<p>Real英会話内で使われている音声ファイルは全てcaf形式です。残念ながらこの形式のファイルをAnkiで再生することはできません。これをまるごとmp3形式に変換してしまいましょう！</p>

<p><strong>(注意)</strong></p>

<p>これから紹介する方法はMacでのみ有効な方法です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[未来を感じるインタフェースを作るスタートアップ7つ]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/01/25/interface-startup/"/>
    <updated>2014-01-25T13:45:19+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/01/25/interface-startup</id>
    <content type="html"><![CDATA[<p><img src="http://r-nmt000.github.io/images/future.jpg" alt="future" /></p>

<p>近年はwebだけでなく実際にデバイスを作っているスタートアップも増えています。
ここではそうしたスタートアップの中でも未来を感じるインタフェースで世界を変えようとしているスタートアップを紹介します。</p>

<!-- more -->


<h2>ジェスチャー</h2>

<h3>Ring</h3>

<p><img src="http://r-nmt000.github.io/images/ring.jpg" alt="Ring" /></p>

<iframe src="http://r-nmt000.github.io//player.vimeo.com/video/74626545" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/74626545">Ring -Shorcut Everything-</a> from <a href="http://vimeo.com/user7740853">Logbar</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>

<p>&ldquo;Shortcut Everything&#8221;を表題にジェスチャーで全てを操作しようというデバイスがRing。
日本発のベンチャーでスタートアップの祭典SF JapanNightで優勝しました。
動画を見ていただければわかりますが、すごい&hellip; カーテン、テレビ、音楽のボリューム、連絡先の交換までショートカットしてしまっています。
この動画の未来が訪れたらと考えるだけでワクワクしますね！</p>

<ul>
<li>コンセプトムービー <a href="http://vimeo.com/74626545">http://vimeo.com/74626545</a></li>
</ul>


<h3>MYO</h3>

<p><img src="http://r-nmt000.github.io/images/myo.jpg" alt="MYO" /></p>

<iframe src="http://player.vimeo.com/video/37562944" width="560" height="315" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>


<p>MYOは指ではなく、腕に取り付けるタイプのジェスチャーデバイスです。
筋肉の動きを読み取ることでジェスチャーを認識しています。
Ringと決定的に違うのは、Ringがショートカットコマンドと対応する動きを覚える必要があるのに対し、
MYOは筋肉の動きを読み取っているのでより柔軟なジェスチャー操作が可能という点です。
FPSにおける銃の上げ下ろしといった操作をナチュラルに再現することができます。</p>

<ul>
<li>公式サイト <a href="https://www.thalmic.com/en/myo/">https://www.thalmic.com/en/myo/</a></li>
</ul>


<h3>mycestro</h3>

<p><img src="http://r-nmt000.github.io/images/mycestro.jpg" alt="mycestro" /></p>

<iframe width="480" height="360" src="https://www.kickstarter.com/projects/mycestro/mycestrotm-the-next-generation-3d-mouse/widget/video.html" frameborder="0" scrolling="no"> </iframe>


<p>キーボードとマウスの移動が煩わしいと思ったことはありませんか？
mycestroはあなたのそんな悩みを解決します。
指につけるタイプのこのデバイスは、空中でまるで指揮者のように手を振るだけでカーソルを操作することができます。
できることはカーソルの操作に限られているので、上記2つと比べると夢がないかもしれませんが実用性は抜群だと思います。</p>

<ul>
<li>公式サイト <a href="http://www.mycestro.com/">http://www.mycestro.com/</a></li>
</ul>


<h2>脳波</h2>

<h3>Muse</h3>

<p><img src="http://r-nmt000.github.io/images/muse.jpg" alt="muse" /></p>

<iframe src="http://player.vimeo.com/video/37562944" width="560" height="315" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>


<p>museはなんとユーザの脳をセンシングすることができるデバイスです。
ヘッドバンドタイプのこのデバイスは脳の活動を読み取り、集中度や興奮度を計測してスマホからそれらを確認することができます。
更に将来は脳内で思考するだけでスマホや家電といったデバイスを操作することも目指しているそうです。
もしそんなことが可能になったらかなり捗りますね&hellip; 現状音声やジェスチャーが最先端のインタフェースと言えそうですが、これが実現すればもはや身体を動かす必要すらないわけです。
個人的にはmuseを使ってテレパシーの様に人と人のコミュニケーションができたらなあ&hellip; と思っています。</p>

<ul>
<li>公式サイト <a href="http://www.interaxon.ca/">http://www.interaxon.ca/</a></li>
</ul>


<h2>ホログラム</h2>

<h3>Displair</h3>

<p><img src="http://r-nmt000.github.io/images/displair.jpg" alt="displair" /></p>

<iframe width="560" height="315" src="http://r-nmt000.github.io//www.youtube.com/embed/yEP7JewA2C8" frameborder="0" allowfullscreen></iframe>


<p>SFのように空中に浮かんだ仮想オブジェクトを操作することは人類の(少なくとも僕の)夢ですが、displairの登場で人類はその夢に一歩近づきました。
空気中に散出した蒸気に対して映像を照射することで仮想オブジェクトを表示し、手の動きをセンシングすることであたかも仮想オブジェクトを触って動かしているような操作感を実現しています。
動画を見てみるとかなりの精度のようです。
ホログラム系のデバイスは手へのフィードバック(実際に触った感覚)が現状課題となっているので、それを解決できればより素晴らしい製品になると思います。</p>

<ul>
<li>公式サイト<a href="http://displair.com/">http://displair.com/</a></li>
</ul>


<h2>その他</h2>

<h3>Oculus Rift</h3>

<p><img src="http://r-nmt000.github.io/images/oculus.jpg" alt="oculus" /></p>

<iframe width="560" height="315" src="http://r-nmt000.github.io//www.youtube.com/embed/GoQ0OXJCbaE" frameborder="0" allowfullscreen></iframe>


<p>Oculus Riftは没入感が半端ないHMDです。
視野角110度(通常のHMDは30~45度), 3D映像, 頭の動きとVR内の視点が連動して動くことでまさに仮想世界にいるような錯覚に陥ります。
僕もOculusでジェットコースターのVRを体験したことがありますが、普通に怖いです。ジェットコースターが下降しているときは本当に落ちているかのような錯覚に陥ります。</p>

<ul>
<li><a href="http://www.oculusvr.com/">http://www.oculusvr.com/</a></li>
</ul>


<h3>ARヘルメット</h3>

<p><img src="http://r-nmt000.github.io/images/helmet.jpg" alt="helmet" /></p>

<iframe src='http://player.cnevids.com/embed/525d923b4ffb60655000000b/5176e89e68f9daff42000013' width='560' height='390' frameBorder='0' allowfullscreen webkitallowfullscreen mozallowfullscreen allowtransparency='true'></iframe>


<p>ARヘルメットはバイカーのための道案内ARヘルメットです。
ヘルメットのシールド部分に道案内の標識が表示されます。</p>

<ul>
<li>公式サイト <a href="http://nilmo.net/news/2_gadjet/2013/20130701_1.html">http://nilmo.net/news/2_gadjet/2013/20130701_1.html</a></li>
</ul>


<h2>近未来のコミュニケーション</h2>

<p>どのスタートアップも非常に未来的ですね。
ここでは6例紹介しましたが、市場に出ているデバイスはDisplairだけです。
こうした未来的デバイスが今後市場に出てくることにより、これから更に大きなムーブメントとなっていくことでしょう。</p>

<p>そして、デバイスが魅力的なことはもちろんですが、こうした製品を作っているスタートアップの方達は20代の方が多いです。
技術がなくても、面白いアイデアを持ち、実現させる情熱があればあなたにもこうした未来を作れるかもしれません。</p>

<p>あなたも新しい未来を作ってみませんか？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study abroad 1]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/01/14/english-canada/"/>
    <updated>2014-01-14T02:08:59+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/01/14/english-canada</id>
    <content type="html"><![CDATA[<p><img src="http://r-nmt000.github.io/images/vancouver.jpg" alt="vancouver" /></p>

<h1>最小の費用で最大の効果を得る留学 1</h1>

<p>自分は2012年の10月から2013年の9月までカナダのバンクーバーってところで働いてました。
語学留学ってやつです。そのときの経験をここに記録して少しでも語学留学を考えている人の役に立てたらなと思います。</p>

<!-- more -->


<h4>注意1</h4>

<p>この記事では自分の考えや思いをなるべく<strong>本音</strong>で<strong>歯に衣着せぬ形</strong>で書いています。かなり<strong>主観的</strong>になっている箇所もあると思います。
読んでいて不快になる人がいたらごめんなさい。なにか意見があったらコメント欄に書いて貰えると嬉しいです。</p>

<h4>注意2</h4>

<p>この記事では</p>

<ol>
<li>いかに安く</li>
<li>いかに語学力の向上を最大化できるか</li>
</ol>


<p>を、主目的としています。海外に行く目的は様々です。異なる文化に触れたり、世界中に友達を作ったり、海外の大学で勉強したり色々あると思います。
ですので、上記の目的に沿わない人はもしかしたらこの記事は見当違いなことを言っているように感じるかもしれません。</p>

<h2>留学前の自分のスペック</h2>

<p>この記事はもちろん自分の経験を参考に書いているので、まずは自分が留学前にどの程度の英語力を持っていたかをここに示しておきます。</p>

<p><strong>TOEIC</strong>
730</p>

<p><strong>会話力</strong>
Skype英会話で3ヶ月くらい会話の練習してた。自己紹介はできる程度</p>

<p><strong>その他</strong></p>

<ul>
<li>英単語帳(Duo)を2周終わらせた。</li>
<li>大学受験でいうと恐らくMARCH入学程度の英語力はあったかと思う。</li>
</ul>


<p>留学は勿論会話力の向上が目的になるのですが、センター試験レベルのリスニング力と単語、文法力は日本で身につけていたほうがいいです。(逆にセンター以上のレベルは日常レベルでは出てこないので勉強しても無駄になるかもしれません)
海外にいる時間は限られているので、単語や文法を向こうで勉強するのはものすごい時間の無駄です。スタートダッシュするためにもやれることはやっときましょう。</p>

<p>個人的には<strong>Real英会話</strong>というiPhoneアプリがオススメです。このアプリでは日常会話で使われるフレーズを学習することができます。フレーズリストは毎日更新され、どんどん増えていきます。(2014年1月現在で3500前後あります)</p>

<p>なによりこのアプリが素晴らしいのは、それぞれのフレーズを会話の中でどのように使われるかを学べる点です。会話ベースで学べるので、ネイティブの会話のノリを学習できるのです。これは非常に大きいです。
自分は留学中にこのアプリを使い始めたのですが、留学前にやれば良かったと後悔しています。</p>

<iframe src="http://spsns.net/tools/app.php?url=https://itunes.apple.com/jp/app/real-ying-hui-hua/id373563219?mt=8" width="720" height="220" frameborder="0"></iframe>


<h2>なんでカナダか</h2>

<p>自分はせっかくならバッチリ英語を喋れるようになりたかったので1年休学することにしました。
短期ならフィリピンとかもいいと思います。安いし！</p>

<p>そんなわけで1年いくことにしたんですが、1年間語学学校に行くような金はありません。つまり、現地で労働する必要があったので<strong>ワーキングホリデービザ</strong>が取れる国に行く必要がありました。</p>

<h4>ワーキングホリデービザとは</h4>

<ul>
<li>1年間限定で学生にも労働者にもニートにもなれるビザ</li>
<li>ワークビザを取るのは基本的にはめっちゃ大変だがワーホリは簡単に取れる</li>
<li>しかも安い。確か1万円くらい</li>
<li>すなわち、最強のビザ</li>
</ul>


<p>このビザが無いと、基本的に僕のような留学生が働くことはできません。
日本から英語圏の国でワーホリが取れる国は、当時はカナダ、オーストラリア、ニュージーランド、イギリスでした(たぶんね)。
で、シリコンバレーにかなり憧れを抱いていた僕は帰りにアメリカ旅行して帰ろうと思ってカナダを選びました。</p>

<p>現地で働けば、</p>

<ol>
<li>学校ではない現地人のリアルな英語を学べる</li>
<li>ネイティブの友達ができる</li>
<li>仕事にもよるが生活費は全てペイできるので留学の初期費用だけ心配すれば良い</li>
</ol>


<p>といった恩恵を受けることができます。主観ですが、<strong>恋人を作る以外でこれ以上の英語学習法はないと思ってます</strong></p>

<h2>なに準備すればいいんだ？</h2>

<p>そうです。留学するぜ！ってなってもなにをどーすればいいかわかりません。そこで<strong>留学エージェント</strong>を使いましょう。
留学までに必要なものを色々教えてくれたり準備してくれたりします。便利！！</p>

<p>ただ、ここで問題があります。このエージェントには無料のところと有料のところがあるのです。
ここで僕の<strong>独断と偏見による</strong>無料と有料のエージェントの長所と短所を見てみましょう</p>

<p><strong>無料</strong></p>

<p>&lt;長所> なんといってもタダ。</p>

<p>&lt;短所> すげー<strong>インターンシップ</strong>を押してくる</p>

<p><strong>有料</strong></p>

<p>&lt;長所> <strong>無駄に</strong>サービスが手厚い, 結構本音で相談に乗ってくれるとこが多かった気がする。</p>

<p>&lt;短所> 手数料を取る。高い。なめてる。</p>

<p>ん？無料の短所のとこになんか書いてありますね。インターンシップ？</p>

<h4>インターンシップとは</h4>

<p>就業体験のこと。現地のオフィスでビジネス英語を学ぶことができる。たいてい無給。</p>

<p>最安で英語力アップを目指すには給料をもらう必要があるので、ここではインターンは選択肢から除外します</p>

<p>が、インターンを考えている人たちへ向けて少し。</p>

<p>恐らくエージェントは&#8221;ビジネス&#8221;や&#8221;オフィス&#8221;という言葉でインターンの素晴らしさを語りますが、大半は英語を使わない仕事になると思います。PCを使った書類整理等の雑用です。
あまりネガキャンはしたくないので多くは語りませんが、彼らがなぜインターンを強く押すのかと言うと<strong>インターン紹介料のため、金のためです。</strong>
そのことを頭においてインターンをするか考えてください。</p>

<p>エージェントについて話を戻します。</p>

<p>どうやってエージェントを使えばよいかということですが、いくつかのエージェントを回って相談してみてください。カウンセリングはタダですから。絶対一つじゃダメです。
そして、有料エージェントで色々相談して無料エージェントで実際に申し込むことをオススメします。</p>

<p>有料エージェントは有料だけあって結構親身に相談に乗ってくれるところも多いです。ありがたいですね。
そして自分の考えが固まったら<strong>無料エージェントで実際に申し込みましょう</strong>
こうすることで無料と有料のいいとこ取りをすることができます。</p>

<p><strong>大切なのはエージェント任せに絶対にしないことです。</strong>搾取されたくなければ自分のことは自分で決めましょう</p>

<h2>個人的に最安だと思う留学プラン(カナダ編)</h2>

<ul>
<li>語学学校1ヶ月        $700</li>
<li>ホームステイ1ヶ月  $700</li>
<li>海外保険                 $2000</li>
<li>航空券(片道)           $800</li>
<li>ワーホリビザ          $100</li>
<li>合計　　　　　　　$4300</li>
</ul>


<p>わお！安い！！まあこれはもちろん最低限必要な金額なので、生活費, 予備のお金等も必要になってきます。しかしそれを計算に入れても、初期費用で<strong>100万円</strong>あれば十分に1年間カナダで暮らせます。<strong>仕事が見つかればね＼(^o^)／</strong></p>

<p>語学学校とホームステイが1ヶ月なのは1ヶ月で十分慣れるからです。マジかよと思うかもしれないけどマジです。
そもそも足りないと思えば現地で期間は伸ばせるんだから1ヶ月でマジで十分です。</p>

<p>住居に関しては最初の1ヶ月はホームステイ、次月からはルームシェアが良いと思います。このへんに関してはまた改めて記事を書きます。</p>

<p>要するに、100万円というのは<strong>仕事が見つかるまでに必要な費用</strong>ということになります。</p>

<p>ここで試しに無料エージェント行って見積もりもらってきてみてください。多分語学学校とホームステイはもっと長期間のプランを薦めてくるはずです。
なぜなら学校とホームステイが長ければ長い程彼らは儲かるから。僕の周りには学校を半年や1年申し込んで2ヶ月くらいで学校行かなくなってお金を無駄にする人がたくさんいました。
エージェントはあの手この手であなたを説得し(割引等)長期間の契約を結ぼうとしますが、<strong>これ以上僕の友人のような犠牲者を出してはいけません</strong></p>

<p>長いんでちょっとこの辺で切ります。次回は学校、ホームステイ、現地に行ったあとの話から始めます。</p>

<h2>まとめ</h2>

<ol>
<li>ワーホリ熱いよ</li>
<li>インターンより働け</li>
<li>有料エージェントで相談し無料エージェントで申し込む</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moaning Programming Language]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/28/programming-scala-brainfuck/"/>
    <updated>2013-12-28T23:52:07+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/28/programming-scala-brainfuck</id>
    <content type="html"><![CDATA[<p><img src="http://r-nmt000.github.io/images/woman.jpg" alt="woman" /></p>

<h1>喘ぐプログラミング言語</h1>

<p>喘いでプログラミングするための言語です。</p>

<!-- more -->


<h2>言語仕様</h2>

<p>Brainfuckの派生言語です。</p>

<p>命令は次のとおり</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"> 命令      </th>
<th align="center">  Brainfuck </th>
<th align="left"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> yeah!     </td>
<td align="center">  >         </td>
<td align="left"> ポインタをインクリメントする                         </td>
</tr>
<tr>
<td></td>
<td align="center"> f**k!     </td>
<td align="center">  &lt;         </td>
<td align="left"> ポインタをデクリメントする                           </td>
</tr>
<tr>
<td></td>
<td align="center"> ah,       </td>
<td align="center">  +         </td>
<td align="left"> ポインタが指す値をインクリメントする                 </td>
</tr>
<tr>
<td></td>
<td align="center"> oh,       </td>
<td align="center">  &ndash;         </td>
<td align="left"> ポインタが指す値をデクリメントする                   </td>
</tr>
<tr>
<td></td>
<td align="center"> comeon!   </td>
<td align="center">  .         </td>
<td align="left"> ポインタが指す値を出力する                           </td>
</tr>
<tr>
<td></td>
<td align="center"> mm&hellip;     </td>
<td align="center">  ,         </td>
<td align="left"> 入力から1バイトポインタが指す先に読み込む            </td>
</tr>
<tr>
<td></td>
<td align="center"> ohmygod!  </td>
<td align="center">  [         </td>
<td align="left"> ポインタが指す値が0なら対応する]の直後にジャンプ     </td>
</tr>
<tr>
<td></td>
<td align="center"> god!      </td>
<td align="center">  ]         </td>
<td align="left"> ポインタが指す値が0でないなら対応する[の直後にジャンプ </td>
</tr>
</tbody>
</table>


<h2>喘ぎ方</h2>

<p><a href="http://r-nmt000.github.io/downloads/MPL.jar">こちら</a>からjarをダウンロードしてください。(重くてごめんなさい)</p>

<p>テキストファイルに喘ぎ声をプログラムし、以下のコマンドを実行してください。(Java実行環境が必要)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar MPL.jar &lt;filename&gt;</span></code></pre></td></tr></table></div></figure>


<h2>hello world</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ah,ah,ah,ah,ah,ah,ah,ah,ah,ohmygod!yeah!ah,ah,ah,ah,ah,ah,ah,ah,yeah!ah,ah,ah,ah,ah,ah,ah,ah,ah,ah,ah,yeah!ah,ah,ah,ah,ah,f**k!f**k!f**k!oh,god!yeah!comeon!yeah!ah,ah,comeon!ah,ah,ah,ah,ah,ah,ah,comeon!comeon!ah,ah,ah,comeon!yeah!oh,comeon!oh,oh,oh,oh,oh,oh,oh,oh,oh,oh,oh,oh,comeon!f**k!ah,ah,ah,ah,ah,ah,ah,ah,comeon!oh,oh,oh,oh,oh,oh,oh,oh,comeon!ah,ah,ah,comeon!oh,oh,oh,oh,oh,oh,comeon!oh,oh,oh,oh,oh,oh,oh,oh,comeon!yeah!ah,comeon!</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>もっといい喘ぎ方があったら教えて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Importatnt things when you choose a company]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/17/jobhunting/"/>
    <updated>2013-12-17T13:17:52+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/17/jobhunting</id>
    <content type="html"><![CDATA[<h2>会社を選ぶ上で重要なこと</h2>

<p>こないだ行ったセミナーで聞いたお話がとても印象深くて自分の考えにも合致していたので、自分なりに解釈してここにまとめてみました。</p>

<!-- more -->


<h2>日本はなぜ衰えたか</h2>

<ul>
<li>実は、衰退したわけではなく他国が追いついただけ</li>
<li>行動成長期の後人口減少が始まるのはどの国でも起こる自然なことで、日本の現状は至極当然</li>
<li>価格競争では他国に勝てないが、かと言って今まで通りのものの作り方(ピュアに高品質を目指す作り方)では世界で勝てない</li>
<li>尖ったモノを作らなければ勝てないが、大企業にはそれができない。リスクを取れないから。</li>
</ul>


<h2>アメリカはなぜ強いか</h2>

<p>かつて日本はアメリカと肩を並べる経済力を持っていましたが今では他国に追いぬかれてしまいました。
しかしアメリカは世界一の経済力を有しています。それにはいくつかの理由があります。</p>

<p><strong>1. 成功を尊ぶ文化</strong></p>

<ul>
<li>アメリカでは新しいことを成すことを尊ぶ文化がある。</li>
<li>リスクを取り、新しいことをして成功しようという空気ができあがっている。</li>
</ul>


<p><strong>2. 移民を受け入れている</strong></p>

<ul>
<li>通常の国では経済成長の後人口が減少していくが、アメリカは移民で人口を増加させている。</li>
<li>特別な技能を持つ人間を迎え入れる体制が法律で整えられている。</li>
</ul>


<p><strong>3. 英語が母国語</strong></p>

<ul>
<li>母国語がグローバルスタンダードであるのは大きい。</li>
<li>全世界へ向けてビジネスを展開しやすく、全世界から人が集まりやすい。</li>
</ul>


<h2>僕達の生きる道は２つある。</h2>

<p>今の日本で生きる道は２つあります。それは</p>

<p><strong>業界トップの企業に行って会社にぶら下がる道</strong></p>

<p>もう一つは</p>

<p><strong>キャリア形成を行ってどこへ行っても通用する力をつける道</strong></p>

<p>日本経済の衰退、終身雇用の崩壊、外資企業の進出から将来多くの人が好む好まざるに関わらず転職を余儀なくされるでしょう。
そうなった時労働者は大きく分けて上記２つの道を歩まざるを得なくなります。</p>

<h2>キャリア形成を考える上でどういった企業がいいのか</h2>

<p>自分の成長に都合の良い会社を選びましょう。特に下記の条件を満たす企業が良いでしょう。</p>

<p><strong>1. 創業経営者がいること</strong></p>

<ul>
<li>２代目、３代目の経営者ではリスクを取る経営はできません。彼らは既に大きくなった会社を危険に晒すことなどできないからです。</li>
<li>リスクが取れないということは、会社全体がきちんと管理されているということです。あなたに大きな裁量権が与えられることは少ないでしょう。</li>
</ul>


<p><strong>2. できれば小さい方がいい</strong></p>

<ul>
<li>小さい会社ではあなたは若い時から大きな裁量権を得られ、自由に動くことができます。０から自分で物事を考えなければなりません。</li>
<li>会社の将来などあなたには関係ありません。若い内に経験を積むことが重要なのです。</li>
</ul>


<p><strong>3. グローバルに通用することをやっているか</strong></p>

<ul>
<li>業務内容は重要です。国内のみに通用する事業ではいずれグローバルな競合他者に飲み込まれるでしょう。</li>
</ul>


<p><strong>4. 同期が8-9割優秀かどうか</strong></p>

<ul>
<li>環境は重要です。1割では足りません。選考の段階で周囲を見渡してどんな人がいるかチェックしてみましょう。</li>
</ul>


<h2>まとめ</h2>

<p>なかなかそんな会社見つけるの難しいよなーというのが正直なところですよね^^;</p>

<p>でも、今まで大手を中心に(というか大手だけ)見ていたので、このセミナーのおかげでベンチャーも見てみようという気になりました。</p>

<p>頑張っていきましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android with Scala]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/17/scala-android-scala/"/>
    <updated>2013-12-17T11:20:42+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/17/scala-android-scala</id>
    <content type="html"><![CDATA[<h1>ScalaでAndroid</h1>

<p>こちらを参考にしました！
<a href="http://shogogg.hatenablog.jp/entry/2013/12/06/000039">Scala + sbt-android + IntelliJ で快適Androidアプリ開発</a></p>

<p>以下に僕が詰まったところをまとめました！</p>

<!-- more -->


<h2>詰まったところ</h2>

<ol>
<li>compatibility-v4とcompatibility-v7-appcompatでエラーが出る</li>
<li>ensime関連のエラーが出る</li>
<li>OutOfMemoryのエラーが出る</li>
</ol>


<h3>compatibility-v4とcompatibility-v7-appcompatでエラーが出る</h3>

<p>参考にしたサイトの手順に沿ってソースをコンパイルしようとすると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[warn]      ::::::::::::::::::::::::::::::::::::::::::::::
</span><span class='line'>[warn]      ::          UNRESOLVED DEPENDENCIES         ::
</span><span class='line'>[warn]      ::::::::::::::::::::::::::::::::::::::::::::::
</span><span class='line'>[warn]      :: android.support#compatibility-v4;19: not found
</span><span class='line'>[warn]      :: android.support#compatibility-v7-appcompat;19: not found
</span><span class='line'>[warn]      ::::::::::::::::::::::::::::::::::::::::::::::</span></code></pre></td></tr></table></div></figure>


<p>となってコンパイルできません。</p>

<p>自分の環境では&lt;project_dir>/project/build.scalaの</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ======================================================================                                                                                                                             
</span><span class='line'>34   // 依存関係
</span><span class='line'>35   // ======================================================================
</span><span class='line'>36   val libraryDependencies = Seq(
</span><span class='line'>37
</span><span class='line'>38     // Android Support Library v4 (jar)
</span><span class='line'>39     "android.support" % "compatibility-v4" % "19",
</span><span class='line'>40
</span><span class='line'>41     // Android Support Library v7 (jar & apklib)
</span><span class='line'>42     "android.support" % "compatibility-v7-appcompat" % "19",
</span><span class='line'>43     apklib("android.support" % "compatibility-v7-appcompat" % "19")
</span><span class='line'>44
</span><span class='line'>45   )</span></code></pre></td></tr></table></div></figure>


<p>の&#8221;19&#8221;の部分を&#8221;19.0.0&#8221;に変更したらうまくいきました。</p>

<h3>ensime関連のエラーが出る</h3>

<p>上記のエラーと似たような感じで、ensimeが見つからねえよ！と怒られるエラーが起きました。
これに関しては調べても解決策が見つからず、恐らく以前に入れたensimeがなにか悪さをしてるんだろーなーと思い
sbtとscalaをインストールし直したところ直りました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew uninstall sbt
</span><span class='line'>brew uninstall scala
</span><span class='line'>rm -rf ~/.sbt
</span><span class='line'>rm -rf ~/.ivy2
</span><span class='line'>brew install sbt
</span><span class='line'>brew instalo scala</span></code></pre></td></tr></table></div></figure>


<p>わけわからなくなったら全部入れ替えちゃうのも手ですね。</p>

<h3>OutOfMemoryのエラーが出る</h3>

<p>これはeclipseでjavaやってたときもみたことあるエラーでした。
eclipseのときはeclipse.iniにメモリサイズを明示することで解決しましたがscalaでは~/.sbtconfigに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SBT_OPTS="-Dfile.encoding=UTF-8 -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256m"  </span></code></pre></td></tr></table></div></figure>


<p>とすることで解決しました。先頭のUTF-8のオプションは元々ついていたもので、後からCMSClassUnloadingとMaxPermSizeを追加しました。</p>

<h3>IntelliJ IDEA 13でandroid support libraryの解決がうまくいかない</h3>

<p>参考にしたサイトではIntelliJ 12を使っているようですが最新が13なので僕は13を使いました。</p>

<p>13はsbtのプロジェクトをそのままimportする機能があり<code>sbt gen-idea</code>する必要がないのですが、今回の構成に限ってはIntelliJの機能でimport
するのではなく<code>sbt gen-idea</code>してからIntelliJでopenするのが無難です。</p>

<h3>まとめ</h3>

<p>僕が詰まったのはこんなところです。
みなさん素晴らしいscalaライフを!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASR/TTS API for smartphone]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/06/smartphone-speechrecognition/"/>
    <updated>2013-12-06T08:55:59+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/06/smartphone-speechrecognition</id>
    <content type="html"><![CDATA[<h2>スマートフォンで使える音声認識・合成APIまとめ(無料)(13年12月現在)</h2>

<p>音声認識・合成機能が必要になったので調べました。
さっと調査しただけなので間違ってたらごめんなさい。
こんなのあるんだ！ってくらいに見ていただけるとありがたいです。</p>

<!-- more -->


<hr />

<h3>OpenEars</h3>

<ul>
<li>iOS向け</li>
<li>日本語には対応してないっぽい&hellip;?(公式ページで対応言語が見つけられなかった)</li>
<li>ASR/TTS対応</li>
<li>使い方 : <a href="http://d.hatena.ne.jp/shu223/20130810/1376105883">フリーのiOS向け音声認識/音声合成ライブラリ&#8221;OpenEars&#8221;の使い方</a></li>
<li>公式 : <a href="http://www.politepix.com/openears/">OpenEars</a></li>
</ul>


<h3>UIDictationController</h3>

<ul>
<li>iOS向け</li>
<li>iOSの非公式クラス</li>
<li>ASRのみ</li>
<li>Siriの音声認識機能がそのまま使えるのは魅力</li>
<li>でも非公式だからこれを使ってアプリ作っても公開できない</li>
<li>使い方 : <a href="http://d.hatena.ne.jp/KishikawaKatsumi/20120310/1331335893">iOS5.1の音声入力を使ってアプリケーションを操作してみる</a></li>
</ul>


<h3>Google 音声認識API</h3>

<ul>
<li>Android向け</li>
<li>日本語対応(各種言語に対応)</li>
<li>ASR/TTS対応(ただしTTSは日本語対応してないらしい)</li>
<li>Google公式、Androidだけでいいならこれでいいかもしれない</li>
</ul>


<h3>iSpeech Mobile SDK</h3>

<ul>
<li>iOS &amp; Android &amp; BlackBerry対応</li>
<li>日本語対応(各種言語に対応)</li>
<li>ASR/TTS対応</li>
<li>Google翻訳の読み上げ機能の内何言語かはiSpeechが使われているらしい</li>
<li>webサービスに実装する場合は有料</li>
<li>公式 : <a href="http://www.ispeech.org/">iSpeech</a></li>
</ul>


<h3>Dragon Mobile SDK</h3>

<ul>
<li>iOS &amp; Android対応</li>
<li>日本語対応(各種言語に対応)</li>
<li>ASR/TTS対応</li>
<li>Dragon Dictationを出している会社のAPI</li>
<li>有料版もあり</li>
<li>公式 : <a href="http://dragonmobile.nuancemobiledeveloper.com/public/index.php?task=home">NDEV nuance mobile</a></li>
</ul>


<h3>Lexee</h3>

<ul>
<li>iOS向け、Android対応予定</li>
<li>(多分)英語のみ</li>
<li>ASR/TTS対応</li>
<li>まだベータ版</li>
<li>Siriのような音声アシスタントを想定して作られているらしい</li>
<li>今のところ無料</li>
<li>今後の動向が気になる</li>
<li>公式 : <a href="http://www.angel.com/labs/lexee.php">Lexee</a></li>
</ul>


<h2>まとめ</h2>

<p>色んなスマートフォン、色んな言語に対応するならiSpeechかDragonかなあという感じですね。</p>

<p>細かくはまだ見てないので精度やライセンスその他諸々確認しつつ使いやつを決めたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Last Starbucks]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/05/others/"/>
    <updated>2013-12-05T16:09:40+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/05/others</id>
    <content type="html"><![CDATA[<h2>前回までのあらすじ</h2>

<ul>
<li>スタバにめっちゃアプライしまくった</li>
<li>受からない</li>
<li>友人の助けを経てラストチャンスに挑む</li>
<li>そして結果が返ってきた</li>
</ul>


<!-- more -->


<h3>遂にメールが届いた&hellip;同じメールを何通受け取ったことだろうか&hellip;</h3>

<p><img src="http://r-nmt000.github.io/images/posts/mailtitle.jpg" alt="mailtitle" /></p>

<h3>今から地獄の門を開くぜ&hellip;</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>　     　　　　＿＿＿＿＿ 
</span><span class='line'>　  　　 　／　＼　 　 ／＼ 
</span><span class='line'>　　  　／ し （＞） 　（＜）＼　　頼む受かっててくれ！　
</span><span class='line'>　　　　|　∪　  （__人__）　J |  　＿＿＿＿＿＿＿_ 
</span><span class='line'>　 　　 ＼　u　　 ｀⌒´　  　／　  | |　　　　　　　| 
</span><span class='line'>　　　　ノ　　　　 　　  　　＼ 　　| |　　　　　　　|　 
</span><span class='line'>　    ／´　　　　　　　　　　　   | |　　 　　 　　| 
</span><span class='line'>　   |　　　　ｌ　　　　　　    　| |　　 　　 　　| 
</span><span class='line'>               　　　　　 　　　＿＿＿_ 
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>             ＿＿＿＿
</span><span class='line'>　　　　　／　　 　u　＼ 
</span><span class='line'>　　 　／　　＼ 　  　 ─＼　　　チラッ 
</span><span class='line'>　　　／し （＞）  　（●）＼ 
</span><span class='line'>　　　|　∪　  （__人__） J|  ＿＿＿＿＿＿＿_ 
</span><span class='line'>　　 ＼　　u　　 ｀⌒´　 　／ | | 　　　　　　　| 
</span><span class='line'>　　　　ノ　　　　　 　　　＼ | |　 　　　　　　|　 
</span><span class='line'>　 ／´　　　　　 　　　 　　 | |　　　　 　　　|　 
</span><span class='line'>　|　　　　ｌ　 　  　　　　　| | 　　　　　　　|                     </span></code></pre></td></tr></table></div></figure>


<p><img src="http://r-nmt000.github.io/images/posts/mailcontents.jpg" alt="mailcontents" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>　　　　　　／￣￣￣￣￣＼ 
</span><span class='line'>　　　　　/;::　　　　 　;ヽ 
</span><span class='line'>　　　　　|;:: ｨ●ｧ　　ｨ●ｧ::| 
</span><span class='line'>　　　　　|;::　　 　　　:;| 
</span><span class='line'>　　　　　|;:: 　c{　っ　:;|　　　 
</span><span class='line'>　　　　  |;::　　＿＿　:;;| 
</span><span class='line'>　　　 　 ヽ;::　　ー　::;／ 
</span><span class='line'>　　　　　　＼;;:　　:;;／ 
</span><span class='line'>　　　　　　 |;::　 ::;| 
</span><span class='line'>　　　　　　 |;::　 ::;| 
</span><span class='line'>　　　／￣￣￣　　　　 ￣￣￣＼ 
</span><span class='line'>　　　|;;::　　　　　　　　::;;| 
</span><span class='line'>　　　|;;::　　　　　　　　::;;| 
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse keybind's setting]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/04/eclipse-tips/"/>
    <updated>2013-12-04T23:56:20+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/04/eclipse-tips</id>
    <content type="html"><![CDATA[<h2>Eclipseでキーバインドの設定をインポート、エクスポートする</h2>

<p>Eclipseの嫌いな機能のひとつ、キーバインドがワークスペースと結びつく機能
こいつのせいでワークスペース切り替えるたびにいちいちキーバインドの設定をインポートしなくちゃいけない。</p>

<!-- more -->


<h1>How to</h1>

<ol>
<li>File->ExportからPreferenceを選択し、Nextボタン押下</li>
<li>Keys Preferencesを選択、To preference fileから出先を指定</li>
<li>Finish</li>
</ol>


<p>できたepfファイルを他のワークスペースでインポートすれば使えます。
この設定ファイルはよく使うと思うのでクラウドにでもあげとくといいかも。
僕は設定ファイルの類はgithubに置いといて違う環境に移った時にすぐ使えるようにしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TagCloud]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/04/octopress-tagcloud/"/>
    <updated>2013-12-04T20:18:00+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/04/octopress-tagcloud</id>
    <content type="html"><![CDATA[<h2>タグクラウド導入してみました。</h2>

<p>参考にしたサイトはこちら</p>

<ul>
<li><p><a href="http://rcmdnk.github.io/blog/2013/04/12/blog-octopress/">Octopressでのタグの運用</a></p></li>
<li><p><a href="http://blog.digital-bot.com/blog/2013/09/03/octopress-tips/">Octopressのカスタマイズ</a></p></li>
</ul>


<p>ありがとうございました。</p>

<!-- more -->


<h2>タグクラウドって？</h2>

<ul>
<li>各記事の内容を端的に表す&#8221;タグ&#8221;</li>
<li>そのタグのリストを<strong>おされ</strong>(重要)に表示したもの(主観)</li>
<li>昔はSEO対策で意味あったっぽい。</li>
<li>今は対策されて意味ないっぽい。</li>
</ul>


<h2>導入</h2>

<p>上記サイトの手順をそのまま実行するだけでおっけーでした。
なので僕がここに書くことはありません笑</p>

<p>ただ、自分のRubyの知識不足とファイルの置換ミスで割と手間取ってしまったので、
結果として結構時間がかかってしまいました。変更箇所は割と多いので細かくブランチを切って作業することをおすすめします。</p>

<p>Ruby勉強しなきゃなあ&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kindle paperwhite]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/01/kindle/"/>
    <updated>2013-12-01T18:29:48+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/01/kindle</id>
    <content type="html"><![CDATA[<h2>買いました！</h2>

<p><img src="http://r-nmt000.github.com/images/th_IMG_0172.jpg" alt="kindle1" /></p>

<!-- more -->


<h2>開封！</h2>

<p><img src="http://r-nmt000.github.com/images/th_IMG_0173.jpg" alt="kindle2" /></p>

<h2>裏面はこんな感じ。</h2>

<p><img src="http://r-nmt000.github.com/images/th_IMG_0174.jpg" alt="kindle3" /></p>

<h2>起動した！かっこいい！</h2>

<p><img src="http://r-nmt000.github.com/images/th_IMG_0175.jpg" alt="kindle4" /></p>

<p>これでたくさん本が読めますね＼(^o^)／</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start your blog with Octopress]]></title>
    <link href="http://r-nmt000.github.io/blog/2013/12/01/new-octopress/"/>
    <updated>2013-12-01T13:51:44+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2013/12/01/new-octopress</id>
    <content type="html"><![CDATA[<h1>Octopressで始めるギークなブログ</h1>

<p>アウトプットの練習として、ブログを始めることにしました。
色んなブログサービスがありますがエンジニア向けということで<a href="octopress.org">Octopress</a>を使ってみることに。
設定は以下のサイトを参考にしました。</p>

<!-- more -->


<ul>
<li><p><a href="http://www.miukoba.net/blog/2013/01/05/start-octopress/">Octopressはじめました</a></p></li>
<li><p><a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/">OctopressでGitHub無料ブログ。sourceをBitbucket管理。簡単ガイド！</a></p></li>
</ul>


<p>大まかな手順は次の通りです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GitHubでOctopress用のリポジトリ作成
</span><span class='line'>Octopressからソースコード取得
</span><span class='line'>GitHubへのdeploy設定
</span><span class='line'>ブログの細かな設定
</span><span class='line'>ブログテーマの変更
</span><span class='line'>記事を作成、アップ</span></code></pre></td></tr></table></div></figure>


<p>上記の手順を１から丁寧に書いてもいいんですが、Octopressの設定については多くの方が分かりやすくまとめてらっしゃるのでここでは自分がつまづいたところをかいつまんで説明していこうと思います。</p>

<hr />

<h2>rake install [&lsquo;theme-name&rsquo;]がうまくいかない</h2>

<p>ブログテーマを設定する箇所です。なぜかinstallが上手くいきません。なんでかなーとググってみると
<a href="http://tantant.jp/blog/Octopress/installing-octopress/">Markdownで書いてGitで管理するブログ「Octopress」の始め方</a>
にある通り、zshを使っていると<em>[ ]</em>が式として認識されてしまうらしいです。
対応策としては<code>rake install \['theme-name'\]</code>のように括弧をバックスラッシュでエスケープする、もしくは.zshrcに以下の設定を追記しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setopt nonomatch</span></code></pre></td></tr></table></div></figure>


<p><code>alias rake="noglob rake"</code>を追記する方法もありますが、これだと後述する<code>bundle exec</code>と組み合わさった時上手く動きませんでした。</p>

<hr />

<h2>rake generateがうまくいかない</h2>

<p>次のエラーが吐かれてrakeが止まります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake aborted!
</span><span class='line'>You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.6. Using bundle exec may solve this.
</span><span class='line'>/Users/nomoto/repos/r-nmt000.github.io/Rakefile:2:in `&lt;top (required)&gt;'
</span><span class='line'>(See full trace by running task with --trace)</span></code></pre></td></tr></table></div></figure>


<p><a href="http://d.hatena.ne.jp/yamanetoshi/20131102/1383355220">Octopress:/var/log/messages</a>によると<code>bundle exec rake generate</code>で上手く動くらしいのですが、動かない&hellip;</p>

<p>更に調べると<a href="http://kozy4324.github.io/blog/2013/03/02/exec-rake-with-version/">バージョンを指定してRakeを実行する</a>ということができるらしいので試してみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake _0.9.6_ generate
</span><span class='line'>(in /Users/nomoto/repos/r-nmt000.github.io)
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>Configuration from /Users/nomoto/repos/r-nmt000.github.io/_config.yml
</span><span class='line'>Building site: source -&gt; public
</span><span class='line'>Successfully generated site: source -&gt; public
</span></code></pre></td></tr></table></div></figure>


<p>できた！</p>

<p>その後、なぜか<code>bundle exec rake</code>でも実行できるようになりました。なぜだ&hellip;</p>

<p>しかしいちいちbundle execを頭につけるのは面倒臭い&hellip;多分回避策はあるんだろうけど、見つからなかったのでとりあえず現状はこれでよしとしよう。</p>

<hr />

<h2>disqusによるコメント欄追加</h2>

<p>_config.ymlに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>disqus_short_name: &lt;blog_name&gt;
</span><span class='line'>disqus_show_comment_count: false</span></code></pre></td></tr></table></div></figure>


<p>と追加するだけ！簡単！</p>

<p>と思いきや、disqus_short_nameにはブログ名を指定しなければいけないのですが僕はdisqusのユーザIDを指定してしまいうまく動きませんでした^^;</p>

<hr />

<p>僕がつまづいたのはこんなところです。</p>

<p>独自ドメインをあてたり、Bitbucketを使ったりはまだしてないですが、おいおいやっていこうと思います。</p>
]]></content>
  </entry>
  
</feed>
