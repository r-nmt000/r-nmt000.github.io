<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NomoLog]]></title>
  <link href="http://blog.r-nmt000.com/atom.xml" rel="self"/>
  <link href="http://blog.r-nmt000.com/"/>
  <updated>2014-12-02T00:03:47+09:00</updated>
  <id>http://blog.r-nmt000.com/</id>
  <author>
    <name><![CDATA[r-nmt000]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ChromeエクステンションのGoogle Translateがマジで便利だった]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/12/01/lifehack-apps/"/>
    <updated>2014-12-01T17:39:34+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/12/01/lifehack-apps</id>
    <content type="html"><![CDATA[<p>というか僕が情弱だっただけなんですが。</p>

<p>皆さんPCで英語などの分からない単語調べる時ってどうしてます？多分多くの人が文字を選択して文字の訳を調べるプラグインなりなんなり使ってると思うんですよね
僕はWeblioというオンライン辞書サービスが大好きでして、Weblioと蜜月の関係だったためにずっとWeblioのChromeエクステンションを使っていたました</p>

<iframe style="border:none;display:block;margin:0 0 1.7rem;overflow:hidden;height:155px;width:600px;max-width:100%;" title="Weblioポップアップ英和辞典 - Chrome ウェブストア" src="http://hatenablog.com/embed?url=https://chrome.google.com/webstore/detail/weblio%E3%83%9D%E3%83%83%E3%83%97%E3%82%A2%E3%83%83%E3%83%97%E8%8B%B1%E5%92%8C%E8%BE%9E%E5%85%B8/oingodpdjohhkelnginmkagmkbplgema?hl=ja"></iframe>


<p>このエクステンションのいいところは調べた単語をそのままWeblioが提供する単語帳にメモしておけるんですね、なので凄い重宝してました。
ただ、センテンスの翻訳に関してはちょっと弱いところがありまして、ずっとどうにかならないかなあと感じていたわけです。</p>

<!-- more -->


<p>それで、今まで長文はどうしてたかというと、わざわざグーグルで「翻訳」って検索してグーグル翻訳開いて翻訳したい文章コピペしてたわけです。
完全に思考停止野郎でした。</p>

<p>そんな折、「あれ、もしかしてグーグル翻訳のエクステンションあるんじゃね？」と思って調べたところ、ありました。</p>

<iframe style="border:none;display:block;margin:0 0 1.7rem;overflow:hidden;height:155px;width:640px;max-width:100%;" title="Google 翻訳 - Chrome ウェブストア" src="http://hatenablog.com/embed?url=https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb?hl=ja"></iframe>


<p>もう、超ベンリです。&mdash;
使い方はカンタン。翻訳したい文章を選択して、出てくるポップアップアイコンをクリックするだけ。</p>

<p><img src="http://blog.r-nmt000.com/images/google_translate.png" alt="google_translate" /></p>

<p>これだけでいい感じに翻訳してくれます！</p>

<p>是非試してみてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kindleのハイライト同期がうまくいかない問題の解決策]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/11/29/others-python/"/>
    <updated>2014-11-29T12:13:44+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/11/29/others-python</id>
    <content type="html"><![CDATA[<p>最近読書にハマっています。特にKindleを使った読書が本当に便利で捗りまくりです。
素晴らしいよKindle(^^)</p>

<p>Kindleには「ハイライト同期機能」というものがついており、Kindle端末上で本にハイライトした箇所を
他の端末と同期したり<a href="https://kindle.amazon.co.jp">Kindleのページ</a>から参照できたりします。</p>

<p><img src="http://blog.r-nmt000.com/images/kindle_highlight.png" alt="kindle_highlight" /></p>

<p>こんな感じです。凄く便利。</p>

<p>当初僕はこのページをEvernoteのWebクリップを使ってEvernoteに保存して本の概要としてまとめようと考えていました。
しかしここで一つ問題にぶつかります。</p>

<!-- more -->


<h2>正しく同期されない&hellip;?</h2>

<p>そうなんです。本によって正しく同期されたりされなかったりするんですね。
いくつか解決策も探してみました。</p>

<p><a href="http://tanisuke.net/entry/1582">「KindleのハイライトがPCで表示・同期されない」の解決方法</a></p>

<p>こちらの記事によると</p>

<ol>
<li>Kindleがネットワークに繋がった状態で</li>
<li>「同期してアイテムをチェック」をクリック</li>
</ol>


<p><img src="http://tanisuke.net/wp-content/uploads/Kindle.jpg" alt="同期してアイテムをチェック" /></p>

<p>で全てのハイライトがKindleページでチェックできるとあります。
しかし僕の環境では上手くいきませんでした。</p>

<p>また、このような記事も見つけました。</p>

<p><a href="http://yoshichiha.com/2013/02/12/kindle-your-highlights-is-not-supported-in-japan">KindleのYour Highlightsは日本ではサポート外らしい&hellip;</a></p>

<p>なんと、そもそもこのハイライト同期機能はAmazon.co.jpではサポート対象外だそうです。
(1年前の記事ですが、現在もうまく動いてないのできっと今も対象外なのでしょう。)
こちらの記事でも「しょうがないね、ちゃんちゃん」で終わってしまっています。
なんということだ&hellip;せっかくこんな素晴らしい機能があるのに使えないだなんて&hellip;</p>

<p>(余談ですが、検索してみるとこの「ハイライト機能」について書かれている記事はたくさんあるのですが、
「ハイライト同期問題」について言及している記事はあまりありませんでした。
みんなハイライト機能最高！ハイライト機能かっけー！って記事ばかりです。
問題が発生している人は少数派なのでしょうか？)</p>

<p>しかし僕は諦めませんでした。なんとかハイライトをEvernoteへ送る方法を探し続けます。そして&hellip;</p>

<h2>Clippings.io</h2>

<p>見つけました。素晴らしいWebサービス。<a href="https://www.clippings.io/">Clippings.io</a>です。</p>

<p>このサービスではKindle端末内に保存されている&#8221;My Clippings.txt&#8221;をインポートすることでハイライトをいい感じにまとめてくれます。
そしてそのハイライトをExcel,Word,PDFといった各種形式、更にEvernoteへ出力することができるのです！！</p>

<p>以下使い方の手順です。</p>

<ul>
<li>まずはKindle端末をPCへ繋ぎましょう。</li>
<li>Clippings.ioにログインします(事前に会員登録しましょう)</li>
</ul>


<p><img src="http://blog.r-nmt000.com/images/clippings.io_home.png" alt="clippings.io_home" /></p>

<ul>
<li>ログインしたら左上のIMPORTボタンをクリックしましょう</li>
</ul>


<p><img src="http://blog.r-nmt000.com/images/clippings.io_explorer.png" alt="clippings.io_explorer" /></p>

<ul>
<li>Click to uploadボタンを押すとファイル選択画面が開くので、接続したKindle内にある&#8221;My Clippings.txt&#8221;を選択しましょう。
ハイライトがClippings.ioにインポートされます。</li>
</ul>


<p><img src="http://blog.r-nmt000.com/images/clippings.io_import.png" alt="clippings.io_import" /></p>

<ul>
<li>続いてEvernoteへエクスポートします。右上のエクスポートをクリックし、Evernoteを選択しましょう。</li>
</ul>


<p><img src="http://blog.r-nmt000.com/images/evernote.png" alt="evernote" /></p>

<ul>
<li><p>どのような形でハイライトをEvernoteへ出力するか選択する画面が出ますので、そのままの設定でいい人はStart Exportを押しましょう。
僕の場合は</p>

<ul>
<li>Create one note for each book(１冊の本単位でノートを作成し、その中にハイライトをまとめます)</li>
<li>Include attached notes(ハイライトに自分のメモを書いてある時は、それも一緒にエクスポートします)</li>
</ul>
</li>
</ul>


<p>の２つを選択しています。</p>

<ul>
<li><p>僕はさらにエクスポートするノートにタグ付けしたいので、Evernote pageをクリックします。</p></li>
<li><p>Additional tagsの欄に追加したいタグを入力します。僕は本関連のノートには&#8221;books&#8221;をつけているので&#8221;books&#8221;と入力しました。
先ほどの画面に戻り、Start Exportをクリックしましょう。</p></li>
</ul>


<p><img src="http://blog.r-nmt000.com/images/evernote_settings.png" alt="evernote_settings" /></p>

<p>以上がClippings.ioを使ったKindleのハイライトをEvernoteへ送る方法です。
Evernote以外にもExcelやWordといった形式でもエクスポートできるので、英語学習に役立てている方もいるようです。</p>

<p><a href="http://mandarinnote.hotcom-cafe.com/kindle%E3%81%AE%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88xweblio%E3%81%A7%E5%8D%98%E8%AA%9E%E5%B8%B3%E4%BD%9C%E6%88%90/">Kindleのハイライトx Weblioで単語帳作成</a></p>

<h2>本当は&hellip;</h2>

<p>実はこの記事を書き始めた時はClippings.ioを見つけておらず、自分でプログラム書いてハイライトをEvernoteへ送ろうとしてました。</p>

<p><a href="https://github.com/r-nmt000/KindleHighlightGenerator.git">Kindle Highlight Generator</a></p>

<p>できたのでよし！と思ってブログ書き始めて、引用のために少しWebブラウジングしてたら見つけてしまいました。Clippings.ioを。
悔しいですがClippings.ioの方が全然素晴らしかったので、僕の書いたプログラムの使い方について書く予定を急遽変更してClippings.ioを紹介した次第です。</p>

<p>僕の３時間を返して欲しいです。</p>

<h2>まとめ</h2>

<p><strong>なにかアクションを起こす前に、きちんと調べてから動き出しましょう</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「アメリカのプログラマの給料が高い」は本当か？]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/11/24/others/"/>
    <updated>2014-11-24T18:28:03+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/11/24/others</id>
    <content type="html"><![CDATA[<p>こんな記事を見つけました。</p>

<p><a href="http://blog.livedoor.jp/kinisoku/archives/4239423.html">アメリカのプログラマーの言語別年収wwwwwwwww</a></p>

<p>で、上の記事で引用されている表がこちら</p>

<p><img src="http://blog.r-nmt000.com/images/chart.png" alt="salary_usa" /></p>

<p>1$=100円とすると、大体1000万円から800万円のレンジですね。</p>

<p>で、こちらが日本のプログラマの言語別年収</p>

<p><a href="http://hrog.net/2014102910652.html">プログラミング言語別!求人給与額ランキング</a></p>

<p><img src="http://blog.r-nmt000.com/images/salary_japan.png" alt="salary_japan" /></p>

<p>大体400万円から300万円のレンジですね。夢も希望もありません。</p>

<hr />

<p><strong>訂正</strong><br/>
<a href="http://hrog.net/2014102910652.html">プログラミング言語別!求人給与額ランキング</a> <em>に表記してある給与は下限金額であるというご指摘を受けました。</em>
<em>つまり、Pythonプログラマを雇う会社は平均して最低380万円程度払っているということです。私がソースをきちんと読んでいませんでした。大変申し訳ありませんでした。</em>
<em>プログラミング言語別給与のソースは他に発見できませんでしたが、&#8221;プログラマ&#8221;として一括りにしたソースはいくつかありました。</em><br/>
<a href="http://nensyu-labo.com/syokugyou_programer.htm">プログラマーの平均年収</a><br/>
<a href="http://careergarden.jp/programmer/salary/">プログラマーの給料・年収</a><br/>
<em>これらによると大体400~500万円が平均となるようです。</em>
<em>訂正してお詫びいたします。</em></p>

<hr />

<p>度々こういう記事は目にしていたんで、アメリカのプログラマの給料が高いって話は知ってはいたんですけど、
<strong>いやでも本当にこんなに高いのか？なにか統計のマジックがあるんじゃないか&hellip;?</strong>と思っていました。</p>

<p>自分に関係のない話ではないですし、いい機会なので日本とアメリカの労働環境や給与について少し調べてみました。</p>

<!-- more -->


<h2>まずは日米の給与分布から</h2>

<p><strong>アメリカのプログラマが特別もらってるんじゃなくて、他の職業でもこれくらい稼げるんじゃないの？</strong></p>

<p>というわけで、とりあえず日米の平均給与や分布を調べてみました。それがこちら。</p>

<p>図1. 日本の年収別人口分布 2013年版
<img src="http://blog.r-nmt000.com/images/populationdistributionjapan.png" alt="日本の年収別人口分布" /></p>

<p>図2. アメリカの年収別人口分布 2013年版
<img src="http://blog.r-nmt000.com/images/populationdistributionusa.png" alt="アメリカの年収別人口分布" /></p>

<p>図1は国税庁が出している<a href="https://drive.google.com/viewerng/viewer?url=https://www.nta.go.jp/kohyo/tokei/kokuzeicho/minkan2013/pdf/001.pdf">民間給与実体統計調査</a>を元に、
図2はUnited States Censusが出している<a href="http://www.census.gov/hhes/www/cpstables/032014/perinc/toc.htm">Selected Characteristics of People 15 Years Old and Over, by Total Money Income in 2013, Work Experience in 2013, Race, Hispanic Origin, and Sex</a>を元に作成しました。</p>

<p>こうして見てみるとアメリカの格差社会っぷりがわかります。日本のグラフと比較するとアメリカはまず年収$20,000以下の人たちがめちゃめちゃ多い。そして$100,000以上稼ぐ人たちの割合もなかなかぶっちぎっています。</p>

<p>さて、プログラマの年収とこれらの分布を比較してみるとどうでしょう？日本の場合は大体平均値あたりに収まっていますね。
アメリカではなんと！トップ10%に食い込んでいます。</p>

<p><strong>プログラマが他の職業よりも稼げるというのはどうやら間違いではないようです。</strong></p>

<h2>他の職業と比較してみると？</h2>

<p>アメリカではどのような職業がお金を稼いでいるのでしょうか？
以下がアメリカで一番たくさん給料をもらっている職業トップ10です。</p>

<p><a href="http://www.forbes.com/pictures/gfii45jij/the-10-best-paying-jobs-of-2014/">The 10 Best Paying jobs of 2014</a></p>

<ol>
<li>外科医($233,150)</li>
<li>一般診療医($187,200)</li>
<li>精神科医($178,950)</li>
<li>歯科矯正医($149,310)</li>
<li>歯医者($146,340)</li>
<li>石油エンジニア($130,280)</li>
<li>管制官($122,530)</li>
<li>薬剤師($116,670)</li>
<li>足病医($116,440)</li>
<li>弁護士($116,440)</li>
</ol>


<p>医療関係者一色ですね、この辺は日本と似ています。</p>

<p>肝心のプログラマはというと、<a href="http://www.bizjournals.com/bizjournals/on-numbers/scott-thomas/2013/04/these-are-the-100-jobs-that-bring-the.html?page=all">こちら</a>によると
46位($102,550)となっています。</p>

<p>なんだやっぱり他にも稼げる職業たくさんあるじゃん！確かにそうかもしれません。余談ですが、今回調べてみてアメリカでは年収$100,000以上稼げる職業の多さにビビりました。
<a href="http://www.bizjournals.com/bizjournals/on-numbers/scott-thomas/2013/04/these-are-the-100-jobs-that-bring-the.html?page=all">このランキング</a>によると
その数なんと53！日本では年収1000万円を超える職業はたったの3つです。(<a href="http://nenshushare.com/koTop/">公式情報から職業別の平均年収・給料を調べる</a>)
そもそも日本は職業の分類がアメリカに比べると非常にざっくりしています。(例えばアメリカは&#8221;医者&#8221;でまとめずに専門ごとに細かく分けています)
そして検索してみるとわかりますが、年収ランキングを調べると日本は職種別よりもまず会社別のランキングが多く目につきます。
この辺りに日米間の仕事に対する意識の違いが見て取れました。日本人では何の仕事をするかよりどの会社で働くかに大きく力点を置いている印象を受けます。
稼ぐ職業に就くというより、稼げる会社に就くといった感じでしょうか。</p>

<p>話が逸れました、プログラマの話に戻しましょう。
こちらをご覧ください。この記事では年収、将来性、ライフワークバランス、ストレス等を元に各職業をスコアリングしランキングしています。
その中でSoftware Developerは1位になっています！</p>

<p><a href="http://money.usnews.com/careers/best-jobs/rankings/the-100-best-jobs">The 100 Best Jobs</a></p>

<ol>
<li>ソフトウェアデベロッパー</li>
<li>コンピュータシステムアナリスト</li>
<li>歯医者</li>
<li>ナースプラクティショナー</li>
<li>薬剤師</li>
<li>レジスタードナース</li>
<li>フィジカルセラピスト</li>
<li>外科医</li>
<li>webデベロッパー</li>
<li>歯科矯正技師</li>
</ol>


<p>確かにプログラマより稼げる仕事は多くあるようですが、その中でもプログラマは将来性やライフワークバランスを考えると良い地位にいるようです。
(少なくとも日本のプログラマとは比べるべくもないようです。)</p>

<h2>プログラマ内での年収格差について</h2>

<p><strong>いや、どうせシリコンバレーの天才共が年収を釣り上げているんだろ？オレは騙されねえよ</strong></p>

<p>次に気になるのはプログラマ内での格差ですね。これはどうなんでしょうか？</p>

<p>図3. プログラマの地理的分布と平均年収
<img src="http://blog.r-nmt000.com/images/metro.png" alt="Average Salary of Software Application Developers by Metropolitan Area, 2013" /></p>

<p>図3は<a href="http://www.brookings.edu/blogs/the-avenue/posts/2014/08/06-the-silicon-valley-wage-premium-rothwell">The Silicon Valley Wage Premium</a>
から引用しました。</p>

<p>図3では円の位置と大きさによってプログラマがどこで、どのような給料をもらっているかを示しています。
この図を見てみると、なるほど確かにシリコンバレーやニューヨークと言った中心地では大勢のエンジニアが良い給料をもらっているようです。</p>

<p>なんだ！やっぱり格差あるんじゃないか！&hellip;ちょっと待ってください。ここで図3に示されている一番小さい円の表す給料を確認してみましょう。
$53,850 &ndash; $70,000となっています。2014年11月25日現在の為替で、635万円~826万円です。大切なことなのでもう一度確認しますが、これは図3に描かれている
<strong>一番小さい円(一番安い給料)が表す年収</strong>です。</p>

<p>以下は<a href="http://www.brookings.edu/blogs/the-avenue/posts/2014/08/06-the-silicon-valley-wage-premium-rothwell">The Silicon Valley Wage Premium</a>
からの引用です。</p>

<blockquote><p>As the map below shows, there is a huge amount of variation in earnings for software application developers across regional labor markets.
In large metropolitan areas like New York, they earn $105,000, but in Louisville, they earn just $72,000.</p></blockquote>

<p>訳すとこんなことを言っています。</p>

<blockquote><p>下図が示すように、ソフトウェアデベロッパの給料は地域によって大きく異る。ニューヨークのような大都市では彼らは$105,000もの大金を稼ぎ出すが、ルイビルではたったの$72,000だ。</p>

<p>たったの$72,000だ</p>

<p><strong>たったの$72,000だ</strong></p></blockquote>

<h2>結論</h2>

<p><strong>アメリカのプログラマの給料が高いというのは、どうやら本当らしい。</strong></p>

<p><strong>少なくとも日本よりは良さそうである。</strong></p>

<p>今回はざっくりと&#8221;プログラマ&#8221;としてまとめて調べたので、
次回はITとWebといった異なる業界でのプログラマやSE間の格差を調べてみようと思います。</p>

<hr />

<p><strong>追記</strong></p>

<p>この記事に関して多くの反響がありましたので少し個人的な意見を述べさせてください。
まずこの記事を書いた動機ですが、この記事を書いている段階で自分がまだ学生で、
世のプログラマがどの程度の給与をもらっているかということに関してほとんど知識がなかったため
その辺りの実情を知りたかったということがあります。</p>

<p>そして「アメリカのプログラマは給料が高い」という情報に対し、自分が納得のいくソースを提示している
日本語記事を見たことがなかったため今回自分なりにまとめました。</p>

<p>この記事では日米の物価差、社会保障、福利厚生等には言及しておりませんが、それは自分が
「アメリカのプログラマの給料が高い」という情報を納得する上で必要なかったからであり、
本来であれば考慮すべきであったと思います。(考慮すると「やっぱり単純には比べられないよね」で終わってしまうと思いますが)</p>

<p>データから単純に日米のプログラマの優劣をつけることは叶わないのかもしれませんが、
それでも僕はアメリカのプログラマを推したいです。それはなぜなら、アメリカがソフトウェアの世界で最強の地だからです。
給与や待遇を超えて、世界中から優秀な人材の集まる地で得られる物は非常に大きいと思います。
そういう意味で全てのプログラマはアメリカ、もっと言えばシリコンバレーに挑戦すべきだと思います。
日本でプログラマをやるということはイーストブルーで海賊をやるようなものです。
どこの世界にワンピースを目指さない海賊がいるのでしょうか？
学生の分際で生意気ですが、目指さないんだったら海賊なんかやるなと僕は言いたいです。</p>

<p>話が逸れましたが、まあそんな感じで、アメリカのプログラマを推したいというのが僕の心情です。</p>

<p><strong>追記の追記</strong></p>

<p>次にこういう記事を書く時はもっとしっかりデータを集め、確認し、多くの方々に納得してもらえるような
記事を書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[週末を2048に費やした結果...]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/11/02/javascript/"/>
    <updated>2014-11-02T22:03:07+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/11/02/javascript</id>
    <content type="html"><![CDATA[<h1>おらあああああ！！見ろやああああ！！！！</h1>

<p><img src="http://blog.r-nmt000.com/images/2048.png" alt="2048" /></p>

<p>わけわからないと思うので説明します。</p>

<!-- more -->


<h2>2048とは？</h2>

<p>鬼シンプルで中毒性の高いゲーム。
ルールを説明するのが面倒臭いので詳細は<a href="http://http://www.web2048.com/jp/">こちら</a>をご参照くだせえ。</p>

<p><strong>ちなみにこのゲームはオープンソースで公開されていて、だれでも自由に改変してオリジナルの2048を創ることができるのだ。</strong></p>

<h2>これまでの経緯</h2>

<p>上でも書いたとおり2048は中毒度MAXなとっても面白いゲームである。僕も例にもれず2ヶ月くらい前に知ってからすきま時間を見つけてはポチポチ遊んでいた。</p>

<p>さて、この週末僕は風邪を引いてしまってダウンしていた。熱は引いてきているもののまだ<strong>ゲリピー状態</strong>である。
そんな状態であるから特にやることもないため、布団の中で一人2048に勤しんでいたのである。
必死こいてハイスコアを目指すがなかなか取ることができない。大体4096のパネルを作って頭打ちである。
しかもこのゲームは作業ゲーかつ運ゲーである。かなりいい感じに進めていてもタイルの出現場所が悪いとそこで積むし、
ゲームオーバーしたらまた何度も作った4096タイルを長時間かけて作りなおす作業の繰り返しである。
途中経過を保存しておけたらこんな無駄な苦労しなくて済むのになあ&hellip;イライラしながらそんなことを考えていたら、悪魔が僕に囁いた。</p>

<h4>僕悪魔「だったらよ、付けちまおうぜセーブボタンとロードボタン」</h4>

<h4>僕天使「いやいやそんなんダメだろちゃんと同じルールの元で解かなきゃ」</h4>

<h4>僕悪魔「いいんだよ何も結果をでっち上げるわけじゃないお前が進めたとこまでを保存するだけさ」</h4>

<h4>僕天使「しかしそんなことしたらゲームがつまらなk</h4>

<h3>僕悪魔「黙れ下痢便野郎」</h3>

<p>僕は悪魔と暗黒魔術の契約をした。</p>

<h2>JavaScriptという名の暗黒魔術</h2>

<p>そんなわけで早速取り掛かった。全部作るのは面倒臭いので既存のwebサービスの2048にJavaScriptで処理を加えてわっしょいする作戦で行くことにした。
web版2048は全てフロント側で処理が完結しているため行けそうだった。当初はブックマークレットとして実装しようとしたが文字数制限があるしjQueryとかも使いたかったので(どちらもブックマークレットで解決可能ではあるが)やり慣れてるChromeExtensionとして実装することにした。
まずはセーブ機能から取り掛かった。こっちはすぐにできた。HTMLからタイルの場所や数字、スコアはすぐにとれた。問題はロードである。</p>

<p>web版2048ではGameManagerというクラスのインスタンスを立ててそこで全てのデータを管理しているのだが、そのインスタンスに外からだとアクセスできないのである！
なぜもっと早くこのことに気づかなかったのか。アホである。</p>

<p>僕は絶望の淵へと追いやられた。せっかくコード書いたのになんてことだ。もう一から2048作るしか無いのか&hellip;?</p>

<p>いや諦めるのはまだ早い。多少強引ではあるが手は残っている。</p>

<p><strong>DeveloperToolsで2048のJavaScriptの適当(GameManager.prototype.move()の冒頭らへんがよさげ)な箇所にブレークを貼り、止まったらコンソールからGameManagerのインスタンスを直接いじる</strong></p>

<p>これだ！これこそがこの状況において残された最善手である！
もちろんインスタンスをちまちま手でいじっていては日が暮れてしまうのでその部分はコードにまとめた。こんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">grid</span><span class="p">.</span><span class="nx">cells</span><span class="o">=</span><span class="p">[];</span>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">grid</span><span class="p">.</span><span class="nx">build</span><span class="p">();</span>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">grid</span><span class="p">.</span><span class="nx">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tile</span><span class="p">({</span><span class="s1">&#39;x&#39;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">grid</span><span class="p">.</span><span class="nx">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tile</span><span class="p">({</span><span class="s1">&#39;x&#39;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>(selfはGameManagerのインスタンスのこと)上の例だとグリッドに1行1列目に4, 2行1列目に2のタイルが現れる。だからこれを編集すればぶっちゃけ好きな様に好きなタイルを配置できてしまう。
しかし僕はそんなことはしない、いくら悪魔と契約したとはいえ魂まで売り渡すようなことはできない。</p>

<p>上で実装したセーブ機能で保存した内容をこの形式で出力してやればめでたくロードができるようになったので僕はこの途中経過保存機能を用いて2048を楽しむことにした。その結果&hellip;</p>

<h2>最強の果てに待っていたもの</h2>

<h3>うぉぉぉおおおおお！！！</h3>

<p><img src="http://blog.r-nmt000.com/images/2048.png" alt="2048" /></p>

<p>これである。まあぶっちゃけやればやるほど上がっていく。もう超楽しい。ドーピング状態。向かう所敵なし。唯我独尊。</p>

<p>この時僕は完全に調子に乗っていた。そして僕は, ここでも悪魔の囁きに耳を傾けてしまった。</p>

<h4>僕悪魔「そういえば世界記録ってどれくらいなのかな？」</h4>

<p>確かにそうだ、ていうか今の俺なら世界記録とか全然目じゃない、ぶっ倒して俺がギネスに載ってやる！</p>

<p>(チートしておいて何を言っているんだという感じだが、当時の僕はあくまでルールは守った上でゲームをしているつもりだった。このゲームの運要素による不幸を排除しているだけのつもりだった)</p>

<p>僕「よーしぐぐってみよう！&#8217;2048 世界記録&#8217;&hellip;っと。ん？何だこのページは？」</p>

<p><a href="http://qiita.com/amoO_O/items/743715e918c87d4c4930">2048の得点計算方法と理論上の最高得点</a></p>

<p>上記サイトから引用</p>

<p><img src="http://blog.r-nmt000.com/images/2048max.png" alt="2048" /></p>

<p>&hellip;</p>

<p>台無しである。なんなのだろうか？それまで僕を包んでいた全能感は一気に消え去り、僕はぐったりとうなだれた。
理論上の最高得点を示してくれたことは嬉しい、それはそれで有益な情報だった。しかしなんということだろう。2048がオープンソースなのをいいことに最高得点が出るようチューニングした2048をこの人は作ってしまったのである。この画像を見せられたら、誰だってチートだと思うだろう。誰も自力で解いたなんて思わない。でも、それは自分にも言えることだった。僕が冒頭でひけらかした画像も、所詮はチートなのである。いや、もはやチートかどうかなど関係ない。2048がオープンソースでいくらでも自分でチューニングできる以上、いかに画像が本物だと主張してもチートである可能性は排除できないのだ。</p>

<p>それを悟ってしまった瞬間、このゲームはただの自己満足だったのだと気づいてしまった。そして僕は、そっとブラウザを閉じた&hellip;</p>

<h2>出会い、そして別れ</h2>

<p>子供の頃、なぜミュウツーを公式のバトルで使えないのか、なぜサンダーボルトが禁止カードなのか納得できなかった。だって両プレイヤーがそれらを使えればそれは不公平ではないのだから。</p>

<p>僕は強いモンスターや珍しいモンスターが好きだった。だからそれらのモンスターを対戦で使えないのは不満だった。</p>

<p>プロアクションリプレイを使って緑のミュウツーや青いミュウを作ったりした。最高にカッコ良かった。レベル５のミュウやミュウツーを大切に育てた。パラメータのドーピングはしなかった。だってそんなことしたらポケモンがつまらなくなっちゃうから。</p>

<p>思えば今回の2048にも通ずる箇所があったように思う。僕は僕なりの正義を持ってチートしたのだ。決して2048の楽しみを損なうような真似はしていない。</p>

<p>しかしそんなことは、全くチートをしていない人たちからすれば関係ないんだね。勝負は同じ土俵で戦うからみんな熱中するんだ。チートなんてドーピングと一緒だ。最強になった後の数瞬は気分がいいけど、その後はろくなもんじゃない。</p>

<p>今回そのことが学べて本当に良かった。子供の頃と同じ過ちを再び繰り返すところだった。戒めとして、本日をもって2048は卒業するよ、この二度と破れないであろうハイスコアを思い出に&hellip;</p>

<h2>まとめ</h2>

<p>今月からはバージョンアップしたマリオカートをやるぞ！！新しいキャラとコースが増えてるので楽しみ！うひょ〜＼(^o^)／</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ぼくのかんがえたさいきょうのしゅうかつ(｀･ω･´)ゞ]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/22/jobhunting/"/>
    <updated>2014-06-22T22:59:05+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/22/jobhunting</id>
    <content type="html"><![CDATA[<p><img src="http://blog.r-nmt000.com/images/job.jpg" alt="jobhunting" /></p>

<p>就活、終わりました。終わったので後輩たちそして将来自分がこの時期を振り返った時の為に記録を残しておきます。</p>

<p><strong>私の独断と偏見によるハイパー主観記事です。故に度々一般常識からかけ離れた記述が散見されますが、どうかご容赦ください</strong></p>

<!-- more -->


<h2>巷の就活</h2>

<p>僕は2013年の11月頃から就活を始めた。合説行ってみたりOB訪問したり、冬・春インターンに申し込んだりして結構早い時期から面接もこなしていたと思う。なので他の就活生よりは割りと面接は得意だった気がする。それでもこの時期はネットを参考にしながらES書いたり面接テクを磨いたりっていう、まあ一般的な就活をしていた。</p>

<h2>逆求人</h2>

<p>それから１月か２月くらいに<a href="https://supporterz.jp/">サポーターズ</a>さんが主催していた逆求人イベントに参加した。逆求人イベントは複数の企業が学生に集まり、学生側は自分がそれまでやってきたことをスライドにまとめて企業側にプレゼンするという、なんともイカすイベントである。逆求人は色々なエージェントが企画しているので是非ググってみて欲しい。</p>

<p>自分でスライドを作りプレゼンの準備を行なうので、余すことなく自分ことを伝えられ、人事の方にもよく理解してもらえる。ちなみに何社か内定もいただいた。</p>

<p>そんな逆求人イベントが終わって数日後、僕は別の会社の面接に向かった。当然そこは通常通りの面接である。</p>

<p>そこで僕は驚愕する。<strong>全然自分自身のことを伝えられないのだ。</strong>いや、別に急にコミュ症になったとかそういうことではない。逆求人以前にも何社か面接をしていたが、その時と変わってないはずである。つまり何が変わったかというと、自分の感覚が変わっていたのだ、逆求人前と後で。</p>

<p>その会社は残念ながら落ちてしまった。結構自信はあったので傷ついた。<strong>そして自分のことを100%伝えきれずに落ちてしまったことを悔いた。</strong></p>

<h2>プレゼンテーションしろ</h2>

<p>それから僕は面接にはスライド(と作ったプログラム)を持ち込むことにした。そのほうが100%自分を伝えることができると思ったからだ。しかし考えてみれば当然のことのように思う。</p>

<p><strong>どこの世界に資料も持たずに口頭だけで商品を売り込む営業マンがいるだろうか？</strong></p>

<p>ちなみにそのスライドは以下のような構成になっている。</p>

<ol>
<li>簡単な自己紹介</li>
<li>サークル活動について</li>
<li>趣味で作ったプログラム</li>
<li>研究</li>
<li>カナダ留学</li>
<li>会社に入って成し遂げたいこと</li>
</ol>


<p>隙間隙間にちょいちょいギャグを挟んだ。俗に言うアイスブレークだ。</p>

<p>余談だがこのギャグは役員面接までは結構受けるのだが最終面接ではなぜか各社社長仏頂面だった。あっそうみたいな。お前なんか興味ねーよみたいな。<strong>僕は大きくなってもうんこで笑える大人でいたい。</strong></p>

<p>そしていよいよ面接であるが、まずは大体自己紹介してくださいとか自己アピールしてくださいとかから始まると思う。ここですかさず</p>

<blockquote><p>スライドを作ってきたのでそれで自己アピールしてもいいですか？</p></blockquote>

<p>と聞くのである。”ダメです&#8221;と言われることはまずない。少なくとも自分はなかった。あとは作ってきたスライドで練習通りに発表するだけである。</p>

<p><strong>面接にスライドを持ち込んでプレゼンすることには次のようなメリットがある。</strong></p>

<ol>
<li>自己PRを存分にできる。</li>
<li>自己PRが視覚的で、分かりやすく伝えられる。</li>
<li>想定問答がし易い。</li>
<li>面接を支配し易い。</li>
<li>スライドを使いまわせる。</li>
<li>ESが適当でもよい。</li>
<li>珍しがられる。</li>
</ol>


<p>まず1だが、通常の面接では面接官が質問し、就活生がそれに答えるという形式が一般的かと思う。しかしこの形式では相手に聞かれていないことを答えることが出来ないのだ。そりゃそうである。故にもっと自分を伝えたいのに伝えられないといった危険性が出てくる。もちろん会話をうまく誘導して自分の話したいことが話せる方向に持っていくという手もあるが、なかなか難しいしそんなことするよりスライドで説明した方が100倍早い。<strong>スライドに自分の経験・制作物・学んだこと・キャラクター、全て詰め込もう。</strong>そうすることで存分に自己PRができる。</p>

<p>2は特に言及する必要はないと思う。写真、音、映像を用いて言葉で伝えるより何倍も分かりやすく自分のことを伝えることができる。</p>

<p>3の想定問答とは、プレゼン後の質問を予め想定して答えを作っておくことである。口頭だけの面接に比べこの方法では想定問答が組みやすい。それはなぜかといえば、4の&#8221;面接を支配しやすい&#8221;からである。基本的に面接では面接官が場を支配することが多いと思う。面接官の質問を基に面接が展開されていくからだ。</p>

<p>しかし、上でも書いたが、<strong>いきなり面接の冒頭でその流れをぶった切るのである。</strong>こちらとしては何度も経験・練習したシチュエーションだが、面接官にしてみれば出鼻をくじかれたことになる。そして当然面接官の質問は就活生が作ったスライドに基いて行われるので、予め想定問答しているこちらとしては痛くも痒くもない。</p>

<p>さらに、この方法ではスライドのほとんどを使いまわせる。スライドの最後に&#8221;御社を志望した理由&#8221;か&#8221;御社で成し遂げたい目標&#8221;を１〜２枚追加しとけば完璧だ。一度スライドを作ってしまえばあとは余裕である。</p>

<p>さらにさらにこのスライドはESの代わりになる。ESに書くことと言えば志望理由や自己PRなので、このスライドでほとんどカバーできてしまうのだ。よってESは必要なし。しかし提出が義務なので、適当にぽぽーーいと書いてしまおう。世の中にはESに<strong>4時間</strong>も時間をかける人がいるらしいが、ご苦労なことである。僕は<strong>30分</strong>で十分だと思っている。</p>

<p>そして、もちろんやっている人はやっていると思うが、やはり多くの就活生は口頭で自己PRしていることがほとんどなので面接官からは珍しがられる。珍しがられるということは、印象に残りやすいということである。</p>

<h2>どうよ？(｀･ω･´)ゞ</h2>

<p>いかにこの自己プレゼン法が素晴らしいかお分かりいただけたであろうか？僕がこの記事を書いたのも、ネットでこの方法を推奨している記事を見たことがなかったからだ。未だに<strong>ビジネスマナーが大事！</strong>とか<strong>笑顔が大事！</strong>(いや大事だけども)とか<strong>ES(笑)が大事！</strong>とか<strong>ロジカルシンキングがうんぬんかんぬん</strong>とかわけのわからんことをほざく記事ばかりで辟易していた。</p>

<h2>おわりに</h2>

<p>最後に就活で印象深かったこと、注意すべきことなどをつらつら書いていこうと思う。</p>

<ul>
<li><strong>会社説明会の最後に書くアンケートはまじめに書こう</strong></li>
</ul>


<p>会社説明会の終わりにアンケートのようなものを書かされることがある。そこで会社説明会を聞いてどう思ったか、印象に残った点、業界の未来予測などを求められることがある。僕はその辺をちゃちゃっと書いてしまったのだが、なんとその資料は履歴書と共に<strong>最終面接までしっかりと面接の材料に使われるのだ。</strong>
決して<strong>おっぱい</strong>などとふざけたことはかかず、まじめに書こう。</p>

<ul>
<li><strong>差し支えなければ選考を受けている他社をお教えください</strong></li>
</ul>


<p>という質問がたまに上記のアンケート中に出てくる。めっちゃ差し支えるので書くのはやめよう。僕はITと金融を受けていたが、ITの会社からなんで金融受けてるの？金融受かったらどうするの？などと突っ込まれた。<strong>うざかったので全部落ちました</strong>と答えておいた。</p>

<ul>
<li><strong>履歴書はPC作成でおｋ</strong></li>
</ul>


<p>このご時世手書きを強制する会社など行く必要はない。<a href="https://www.goodfind.jp/">GoodFind</a>の履歴書ジェネレーターがいい感じで、お世話になっていた。</p>

<p>余談だが内定をいただいた某Web系の会社は、内定のお知らせも内定通知書も<strong>メール</strong>で送ってきた。僕も辞退するときは<strong>メールで</strong>辞退させていただいた。これこそがIT社会の<strong>あるべき姿</strong>ではないだろうか？</p>

<ul>
<li><strong>自分らしくあれ</strong></li>
</ul>


<p>何度かグループ面接をすることがあった。周りの就活生は姿勢や言葉遣いを大変に気にしている様子で、適切な敬語が出てこず言葉に詰まってしまう人もいた。あなたが元々品行方正な人ならそのまま面接に臨めばいい、適当な人なら、肩肘張らず適当なまま自然体で面接に臨めばいいと思う。僕は面接の時は一人称は&#8221;僕&#8221;だった。謙譲語と尊敬語は使いこなせてないし、ワイシャツの袖のボタンを外したままで注意されたし、<strong>そもそも面接に１時間遅刻しちゃったこともあった</strong>(財布とスイカを忘れた)</p>

<p>それでも受かるとこは受かるし、落ちるとこは落ちる。もし自然体で面接して落ちたなら、それはその会社があなたのような人を必要としていないだけだ。適当なあなたを必要とする会社に入ればいい。</p>

<ul>
<li><strong>GDで出会い系自慢してくる変な人がいた</strong></li>
</ul>


<p>僕はベンチャー中心に受けていたのであまりGDをやる機会はなかったのだが、数少ないGDで話をぶった切って出会い系で女のコと出会いまくってる話をする面白い人がいた。お笑いの学校に通ってるらしかった。さすが芸人は面白いなと思った。多分彼は落ちたろう。</p>

<ul>
<li><strong>りくらぶ</strong></li>
</ul>


<p>全然なかった。そもそもほとんど女のコいなかった。こんな時はエンジニアであることを呪いたくなる。</p>

<p>これも余談だが、とあるインターンで知り合った女のコに<strong>&ldquo;オ◯ ニーはしますか？&rdquo;</strong>と初対面で聞いたことがあった。酔っ払っていたのだ。</p>

<blockquote><p>覚えられないくらいなら、嫌われた方がマシだ。</p></blockquote>

<p>これは僕が将来ビッグになったら後世に残したい言葉である。りくらぶしたい人はこの言葉を胸に頑張って欲しい。</p>

<h2>おわりのおわり</h2>

<p><strong>皆さんのご多幸をお祈りしています</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NeoBundleInstallでjedi-vimがインストールされない問題]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/19/vim-python/"/>
    <updated>2014-06-19T20:26:06+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/19/vim-python</id>
    <content type="html"><![CDATA[<p><code>.vimrc</code>に<code>NeoBundleInstal 'davidhalter/jedi-vim'</code>を書き加えて<code>:NeoBundleInstall</code>しても<code>HTTP request failed</code>と怒られてインストール出来ませんでした。</p>

<!-- more -->


<p>原因がよくわからなかったので、手動でjedi-vim入れて解決しました。手順は以下。</p>

<hr />

<p><strong> 1.  <code>bundle</code>フォルダ以下に<code>git clone</code>でjedi-vimを取ってくる </strong></p>

<p><code>NeoBundleInstall</code>で本来インストールされるべき場所に手動でjedi-vimを入れます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd .vim/bundle
</span><span class='line'>git clone https://github.com/davidhalter/jedi-vim.git</span></code></pre></td></tr></table></div></figure>


<p><strong> 2. <code>jedi-vim</code>フォルダ内で<code>git submodule</code> </strong></p>

<p>jedi-vimはjediをsubmoduleとして持っているので<code>git submodule</code>でjediを更新してあげます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd jedi-vim
</span><span class='line'>git submodule update --init</span></code></pre></td></tr></table></div></figure>


<p><strong> 3. <code>:NeoBundleUpdate</code>する </strong></p>

<p><code>.vimrc</code>で<code>:NeoBundleUpdate</code>してみます。インストールし直しますか？と聞かれるのでNoを選択します</p>

<p><strong> 4. <code>:h jedi</code>で動作確認 </strong></p>

<p>ちゃんとjedi-vimが動いていれば<code>:h jedi</code>でjediのヘルプが見れます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django チュートリアル]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/15/pyhton-django/"/>
    <updated>2014-06-15T20:11:46+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/15/pyhton-django</id>
    <content type="html"><![CDATA[<p>PythonのWebフレームワークであるDjangoを勉強しました。
<a href="http://docs.djangoproject.jp/en/latest/intro/tutorial01.html">こちらのチュートリアル</a>を進めていく上で引っかかったところをまとめました。</p>

<!-- more -->


<p>h2. apple wireless keyboardの導入</p>

<p> 使いやすいようにキーバインドを調整</p>

<ul>
<li>changekey.exeによるキーバインドの変更</li>
<li>Apple Wireless Keyboard Helper for Windowsを入れてFnキー等を有効化</li>
</ul>


<p> h2. キーバインドの入れ替え</p>

<ul>
<li><p>Google日本語入力を導入</p></li>
<li><p>コマンドキーで日本語・英語入力を切り替えられるように変更</p></li>
</ul>


<p>h2. Djangoの学習</p>

<p>h3. Djangoの導入</p>

<ul>
<li>virtualenvを導入 (<a href="http://blog.r-nmt000.com/blog/2014/06/09/python3/">http://blog.r-nmt000.com/blog/2014/06/09/python3/</a>)</li>
<li>以下の手順でpython仮想環境を構築、Djangoをインストール</li>
</ul>


<p><strong>注意！！</strong></p>

<p><strong>sudo</strong> pip installしてしまうと元環境のpythonのsite-packagesにインストールされてしまう模様！！</p>

<pre>
mkvirtualenv --no-site-packages necomend (python仮想環境側でライブラリを管理するためのオプション)
pip install django



以下djangoが入ったことの確認
python
>> import django
>> print django.get_version()
>> 1.6.5
</pre>


<p>h3. Djangoでweb serverを立ち上げた時ホストからアクセスできない問題</p>

<ul>
<li>まずvagrantのport forwardを設定する</li>
</ul>


<pre>
config.vm.network "forwarded_port", guest: 8000, host: 8800
</pre>


<ul>
<li>次にゲストOSのファイアウォールの設定(ポート8000を開ける)</li>
</ul>


<pre>
sudo vi /etc/sysconfig/iptables

＃以下を追記
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8000 -j ACCEPT
</pre>


<ul>
<li>ipアドレス0.0.0.0を指定しweb serverを起動</li>
</ul>


<pre>
python manage.py runserver 0.0.0.0:8000
</pre>


<ul>
<li>ホストからlocalhost:8800でアクセスできる</li>
</ul>


<p>h2. DBの設定</p>

<ul>
<li>MySQLでDBを作成</li>
</ul>


<pre>
mysql -u root -p <- ログイン
>> create table necommend;
>> exit;
</pre>


<ul>
<li>settings.pyにDB設定を記述</li>
</ul>


<pre>
DATABASE = {
    'default' : {
    'ENGINE' : 'django.db.backends.mysql',
    'NAME' : 'necommend',
    'USER' : 'root',
    'PASSWORD' : '',
    'HOST' : '',
    'PORT' : '',
     }

}

</pre>


<ul>
<li>settings.pyでタイムゾーン、文字コードを変更</li>
</ul>


<pre>
TIME_ZONE = 'Asia/Tokyo'

LANGUAGE_CODE = 'utf-8'
</pre>


<ul>
<li><p>最低限必要なテーブルを上で設定したDBに作成</p></li>
<li><p>pythonに付属のappsを使うのに必要なテーブルが作られる。</p></li>
<li>詳細は <a href="http://docs.djangoproject.jp/en/latest/intro/tutorial01.html">http://docs.djangoproject.jp/en/latest/intro/tutorial01.html</a></li>
</ul>


<pre>
python manage.py syncdb
</pre>


<ul>
<li>ここでエラー。MySQLdbなるモジュールがないと怒られる。対応策は以下</li>
</ul>


<pre>
#まずpython-develとmysql-develをyumで入れる
yum -y install python-devel mysql-devel

#次にpipでmysql-pythonを入れる
pip install mysql-python
</pre>


<ul>
<li>これでpython manage.py syncdbが動く</li>
<li>Djangoの認証ユーザ？の作成を求められるので作成</li>
</ul>


<pre>
Username: nomoto
e-mail: ryusuke.nomoto@brainpad.co.jp
password: いつもの
</pre>


<p>h2. DjangoにおけるRDB多対多の関係</p>

<p>チュートリアルにはなかったので補足</p>

<p>例えばBlogとTagという多対多の関係を実現するときは次のようにする。</p>

<p>models:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Tag</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>  <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__unicode__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Blog</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tags</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Tag</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__unicode__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>shell:<code>python manage.py shell</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">それぞれブログとタグを作り保存する。</span>
</span><span class='line'><span class="n">b1</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;blog1&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">b2</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;blog2&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">b3</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;blog3&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">Tag</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;pyton&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="n">Tag</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;django&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">保存しないとブログとタグを結びつけることができない</span>
</span><span class='line'><span class="n">b1</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'><span class="n">b2</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'><span class="n">b3</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'><span class="n">t1</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'><span class="n">t2</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="err">ブログとタグを結びつける。</span>
</span><span class='line'><span class="n">b1</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">t1</span><span class="p">)</span>
</span><span class='line'><span class="n">b2</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">)</span>
</span><span class='line'><span class="err">新しくタグを生成</span><span class="p">,</span> <span class="err">ブログと結びつける</span>
</span><span class='line'><span class="n">t3</span> <span class="o">=</span> <span class="n">b3</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">ブログと結びついているタグを全て表示</span>
</span><span class='line'><span class="n">b1</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="o">&lt;</span><span class="n">Tags</span><span class="p">:</span> <span class="n">python</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'><span class="n">b2</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="o">&lt;</span><span class="n">Tags</span><span class="p">:</span> <span class="n">python</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">Tags</span><span class="p">:</span> <span class="n">django</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'><span class="err">タグと結びついているブログを全て表示</span>
</span><span class='line'><span class="n">t1</span><span class="o">.</span><span class="n">blog_set</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="o">&lt;</span><span class="n">Blog</span><span class="p">:</span> <span class="n">blog1</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">Blog</span><span class="p">:</span> <span class="n">blog2</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'><span class="err">タグとブログを結びつける</span>
</span><span class='line'><span class="n">t1</span><span class="o">.</span><span class="n">blog_set</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">b3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>h2. DBへデータを登録</p>

<p><a href="http://docs.djangoproject.jp/en/latest/intro/tutorial01.html">チュートリアルにある通り</a>シェルからぽちぽちDBへデータを追加してもよいが、面倒なのでCSVから一気に登録する方法を探した。</p>

<p><a href="http://bty.sakura.ne.jp/wp/archives/1088">こちら</a>を参考にした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dotfiles]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/14/zsh-vim/"/>
    <updated>2014-06-14T20:42:39+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/14/zsh-vim</id>
    <content type="html"><![CDATA[<p>いつも使ってるvimやzshの設定をgitリポジトリにあげて、新しい環境で<code>make</code>するだけで導入できるようにしました。</p>

<p>作業中につまづいたところをまとめておきます。</p>

<!-- more -->


<p>ちなみにレポジトリはこちら</p>

<ul>
<li><a href="https://github.com/r-nmt000/dotfiles">r-nmt000/dotfiles</a></li>
</ul>


<p>基本的な流れはREADMEに書いてありますが、</p>

<ol>
<li>vim, git, zshインストール</li>
<li>git clone 上記リポジトリ</li>
<li>make</li>
<li>vimprocをmake</li>
<li>NeoBundleInstall</li>
</ol>


<p>となります。</p>

<h2>git submodule</h2>

<p>永遠の宿敵git submodule。あまり使わないからいつもどうやって使うか忘れてしまう。</p>

<p>自分はvimのプラグインをNeoBundleで管理しているのですが、NeoBundleでgithubから取ってきたプラグインは
submodule扱いになるようです。</p>

<p>ですので.gitignoreでNeoBundleとVimproc以外のプラグインは無視するようにしました。
あとからNeoBundleInstallでまとめて入れます。</p>

<p>Vimprocだけは<code>NeoBundleInstall</code>を実行するのに必要なのでsubmoduleとして入れておきます。</p>

<h2>vimprocをわざわざmakeしなきゃいけない</h2>

<p>dotfilesの<code>make</code>から<code>make -d .vim/bundle/vimproc</code>のようにmakefileを探すディレクトリを指定して
vimprocの<code>make</code>ができないかとやってみましたができませんでした。</p>

<p>このあたりも参考にしたのですが、結局わざわざvimproc直下まで移動して<code>make</code>してます&hellip;何かいい手はないものか&hellip;</p>

<p><a href="http://mba-hack.blogspot.jp/2013/03/neobundlevimproc.htm%E3%81%82%E3%81%A8%E3%81%8B%E3%82%89NeoBundleInstall%E3%81%A7%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E5%85%A5%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82">NeoBundleでVimprocを自動インストールする方法</a></p>

<h2>まとめ</h2>

<p>ひとまずこれでいろんな端末(Unix系)でいつものzsh, vimが使えるようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant & Chef]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/11/vagrant-chef/"/>
    <updated>2014-06-11T22:00:24+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/11/vagrant-chef</id>
    <content type="html"><![CDATA[<p>Vagrantを使う機会があったのでVagrant+Chef Soloでの開発環境構築をやってみました。</p>

<p>その時の備忘録です。</p>

<!-- more -->


<p>参考にしたのはここ。</p>

<ul>
<li><a href="http://qiita.com/taiki45/items/b46a2f32248720ec2bae">今っぽい Vagrant + Chef Solo チュートリアル</a></li>
</ul>


<p>基本的には上記リンクの手順に従っていきます。</p>

<p>で、個人的に詰まった所が以下。</p>

<h2>早速vagraant upが動かん&hellip;</h2>

<p>いきなりです。こんなことが許されるのでしょうか？</p>

<p>元々以前にVagrantとChefは触ったことがあって、それからOSをMarvericsにアップグレードしたことが原因でした。</p>

<p>解決策はこちら。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo launchctl load /Library/LaunchDaemons/org.virtualbox.startup.plist</span></code></pre></td></tr></table></div></figure>


<p><a href="http://firegoby.jp/archives/5182">Mac OS X Mavericks で Vagrant がこける時の対処法</a></p>

<h2>Vagrant Cloud</h2>

<p>そんなのができたのかー！</p>

<p>今までは<a href="http://www.vagrantbox.es/">Vagrantbox.es</a>(下画像)とかから欲しいboxをリストから探して、URLをいちいちコピってきて</p>

<p><img src="http://blog.r-nmt000.com/images/vagrantcloud.png" alt="vagrantcloud" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant box add &lt;box_name&gt; &lt;url&gt;</span></code></pre></td></tr></table></div></figure>


<p>って形式でBOXを追加してたのが、</p>

<p>VagrantCouldから自分が欲しいBoxを検索(OS,VMWareかVirtualBoxか, Chefの有無など)して、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant login &lt;- cloudへ事前にログイン
</span><span class='line'>vagrant box add &lt;box_name&gt;</span></code></pre></td></tr></table></div></figure>


<p>でBoxの追加ができる。</p>

<p>気に入ったBoxをお気に入り登録したり、自分でBoxを作って公開もできる。</p>

<p>これはなかなかナイスですね^^</p>

<p><a href="http://kimikimi714.hatenablog.com/entry/2014/04/05/vagrant%E3%81%AEbox%E3%82%92vagrant_cloud%E3%81%8B%E3%82%89%E3%82%82%E3%82%89%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B">vagrantのboxをvagrant cloudからもらってくる</a></p>

<h2>cannot load such file &mdash; hashie/hash_extensions</h2>

<p>なにやらBerskshelfなるものがアツいということでBerkshelfを入れて、必要な設定を書いて、設定を反映さえるために<code>vagrant up</code>したところ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrant failed to initialize at a very early stage:
</span><span class='line'>
</span><span class='line'>The plugins failed to load properly. The error message given is
</span><span class='line'>shown below.
</span><span class='line'>
</span><span class='line'>cannot load such file -- hashie/hash_extensions</span></code></pre></td></tr></table></div></figure>


<p>こんなエラーが。</p>

<p>Berkshelfのバージョンが古いことが原因のようです。</p>

<p>解決方法は<a href="https://groups.google.com/forum/#!topic/vagrant-up/ZZRPWXwfvGE">こちら</a>にある通り</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant plugin install vagrant-berkshelf --plugin-version '&gt;=2.0.1'</span></code></pre></td></tr></table></div></figure>


<p>でvagrant-berkshelfを入れなおしたところうまくいきました。</p>

<h2>Vagrantfileのv1.0系後方互換モード</h2>

<p>古い記事をそのまま参考にしててはまった。</p>

<p>上記エラー解決して<code>vagrant up</code>!したところ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Warnings:
</span><span class='line'>* Unknown configuration section 'berkshelf'. If this section was part of
</span><span class='line'>* a Vagrant 1.0.x plugin, note that 1.0.x plugins are incompatible with 1.1+.
</span><span class='line'>* * Unknown configuration section 'omnibus'. If this section was part of
</span><span class='line'>* a Vagrant 1.0.x plugin, note that 1.0.x plugins are incompatible with 1.1+.</span></code></pre></td></tr></table></div></figure>


<p>このようなエラーがでてしまいました。</p>

<p>原因はVagrantfileで以下のように設定していたことです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrant::Config.run do |config|
</span><span class='line'>  以下設定...
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Vagrantのv.1.0系では上記のような書き方をしていましたが、これは古い書き方だそうです。
後方互換のために残っているようです。1.0x系向けのプラグインを設定するときなど。</p>

<p>正しくはこう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrant.configure("2") do |config|
</span><span class='line'>　以下設定...
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>Vagrant::Config.runの書き方は古いので注意！！</strong></p>

<h2>まとめ</h2>

<p>すごい手間取ってしまいましたが一応きちんと動くところまではいきました。</p>

<p>今度はChefをもっと使い倒してみたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[post_urlでLiquid Exception]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/10/octopress/"/>
    <updated>2014-06-10T00:20:34+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/10/octopress</id>
    <content type="html"><![CDATA[<p><a href="http://www.drurly.com/blog/2012/06/01/octopress-linking-to-other-posts">post_url</a>を導入したら、Liquid Exceptionしてしまった話</p>

<!-- more -->


<p>自分の投稿した記事へのリンクを簡単に貼れるpost_urlを導入した所、下記リンクと同じエラーが。
対応策もかいてあるのですが、自分の環境では上手くいきませんでした。</p>

<p><a href="https://github.com/davidfstr/rdiscount/issues/75">post_url erroring with rdiscount</a></p>

<p>しかし解決しました。リンク先ではcategory_feed.xmlに問題があったようですが、自分の場合はtag_feed.xmlに問題があったようです。</p>

<p>一応category_feed.xmlもtag_feed.xmlも<code>markdownify</code>の箇所を<code>markdownize</code>に変更</p>

<p>エラーが消えました＼(^o^)／</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺的Python気になった所まとめ3]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/09/python3/"/>
    <updated>2014-06-09T22:27:37+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/09/python3</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.r-nmt000.com/images/python.png"></p>

<p><a href="http://blog.r-nmt000.com/blog/2014/06/09/python3/"> 俺的Python気になった所まとめ2の続きです。 </a></p>

<!-- more -->


<h2>with文</h2>

<p>ファイル入出力のときはとりあえずこいつ使っとけって感じらしい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/workfile/, &#39;r&#39;) as f:</span>
</span><span class='line'>  <span class="n">read_data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>with文中で例外が発生してもf.closeしてくれる。try-except-finallyより簡単に書ける。</p>

<h2>pickleモジュール</h2>

<p>複雑なpythonのデータ型(リスト、辞書、クラスのインスタンス)を文字列表現に直してファイルへリード・ライトしてくれるいかしたモジュール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいに使う。</p>

<h2>プライベート変数</h2>

<p>Pythonでは定義されていない。しかし、アンダースコアで始まる名前(ex. _spam)はプライベートな変数、関数、メソッドとして扱う慣習があるらしい。</p>

<h2>pythonのイテレータ</h2>

<p>リストや辞書など複数のデータがひとまとめにするデータ構造に対して、for文などで各要素にアクセスできる仕組み。こんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">element</span>
</span><span class='line'><span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">element</span>
</span><span class='line'><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="p">{</span><span class="s">&#39;one&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;two&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">}:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">key</span>
</span><span class='line'><span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="s">&quot;123&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">char</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;myfile.txt&quot;</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">line</span>
</span></code></pre></td></tr></table></div></figure>


<p>クラスに対して独自にイテレータを実装してみる。PersonクラスをまとめるGroupクラスを作り、for文で各Personクラスにアクセスできるようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">nm</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">nm</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Group</span><span class="p">:</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">persons</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">person</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">persons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">StopIteration</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">persons</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="n">Group</span><span class="p">()</span>
</span><span class='line'><span class="n">person1</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">person2</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">person3</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">person1</span><span class="p">)</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">person2</span><span class="p">)</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">person3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力は以下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<h2>pythonのgenerator</h2>

<p>generatorを使うことで上記のiteratorを簡単に実装できる。</p>

<p>以下のソースは上記iteratorの実装と同値</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">nm</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">nm</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Group</span><span class="p">:</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">persons</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">person</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">persons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">iter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">persons</span><span class="p">:</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">person</span>
</span><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="n">Group</span><span class="p">()</span>
</span><span class='line'><span class="n">person1</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">person2</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">person3</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">person1</span><span class="p">)</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">person2</span><span class="p">)</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">person3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">group</span><span class="o">.</span><span class="n">iter</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>
return文のかわりにyieldを使うとgenerator関数になるらしい。</p>

<h2>python仮想実行環境の構築</h2>

<p>古い記事を見てえらい目にあった。
とりあえずこの辺を入れればいいらしい。</p>

<ol>
<li>Setuptools(Pythonのパッケージ管理ツール)</li>
<li>pip(これまたパッケージ管理ツール)</li>
</ol>


<p>pipが公式推奨らしいけどpipがSetuptoolsに依存しているので入れなきゃダメらしい。
SetupToolsの導入に関しては<a href="https://pypi.python.org/pypi/setuptools#unix-including-mac-os-x-curl">公式</a>を参照しよう。</p>

<p>setuptoolsが入ったら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">easy_install</span> <span class="n">pip</span>
</span></code></pre></td></tr></table></div></figure>


<p>でpipを入れる。easy_installはuninstallコマンドが無いらしくpipがパッケージ管理ツールとして推奨されているらしい。</p>

<p>(*Python3.4以降ではpipを自動インストールするためのensurepipという公式ライブラリがあるらしい。これ使えばよかった。くそう。<a href="https://docs.python.org/3/library/ensurepip.html">ensurepip</a>)</p>

<p>次に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pip</span> <span class="n">install</span> <span class="n">virtualenv</span> <span class="n">virtualenvwrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>でvirtualenvとvirtualenvwrapperを入れる。</p>

<p>virtualenvwrapperはvirtualenvを使いやすくするためのツール。</p>

<p>こちらに従って導入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mf">1.</span> <span class="n">Create</span> <span class="n">a</span> <span class="n">directory</span> <span class="n">to</span> <span class="n">hold</span> <span class="n">the</span> <span class="n">virtual</span> <span class="n">environments</span><span class="o">.</span>
</span><span class='line'> <span class="p">(</span><span class="n">mkdir</span> <span class="err">$</span><span class="n">HOME</span><span class="o">/.</span><span class="n">virtualenvs</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mf">2.</span> <span class="n">Add</span> <span class="n">a</span> <span class="n">line</span> <span class="n">like</span> <span class="s">&quot;export WORKON_HOME=$HOME/.virtualenvs&quot;</span>
</span><span class='line'>     <span class="n">to</span> <span class="n">your</span> <span class="o">.</span><span class="n">bashrc</span><span class="o">.</span>
</span><span class='line'><span class="mf">3.</span> <span class="n">Add</span> <span class="n">a</span> <span class="n">line</span> <span class="n">like</span> <span class="s">&quot;source /path/to/this/file/virtualenvwrapper.sh&quot;</span>
</span><span class='line'> <span class="n">to</span> <span class="n">your</span> <span class="o">.</span><span class="n">bashrc</span><span class="o">.</span>
</span><span class='line'><span class="mf">4.</span> <span class="n">Run</span><span class="p">:</span> <span class="n">source</span> <span class="o">~/.</span><span class="n">bashrc</span>
</span><span class='line'><span class="mf">5.</span> <span class="n">Run</span><span class="p">:</span> <span class="n">workon</span>
</span><span class='line'><span class="mf">6.</span> <span class="n">A</span> <span class="nb">list</span> <span class="n">of</span> <span class="n">environments</span><span class="p">,</span> <span class="n">empty</span><span class="p">,</span> <span class="ow">is</span> <span class="n">printed</span><span class="o">.</span>
</span><span class='line'><span class="mf">7.</span> <span class="n">Run</span><span class="p">:</span> <span class="n">mkvirtualenv</span> <span class="n">temp</span>
</span><span class='line'><span class="mf">8.</span> <span class="n">Run</span><span class="p">:</span> <span class="n">workon</span>
</span><span class='line'><span class="mf">9.</span> <span class="n">This</span> <span class="n">time</span><span class="p">,</span> <span class="n">the</span> <span class="s">&quot;temp&quot;</span> <span class="n">environment</span> <span class="ow">is</span> <span class="n">included</span><span class="o">.</span>
</span><span class='line'><span class="mf">10.</span> <span class="n">Run</span><span class="p">:</span> <span class="n">workon</span> <span class="n">temp</span>
</span><span class='line'><span class="mf">11.</span> <span class="n">The</span> <span class="n">virtual</span> <span class="n">environment</span> <span class="ow">is</span> <span class="n">activated</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本的には<code>mkvirtualenv &lt;env_name&gt;</code>
で新しい仮想環境が構築される。</p>

<p><code>workon</code>で現在使用できるpython環境を一覧表示、</p>

<p><code>workon &lt;env_name&gt;</code>で環境の切り替えができる。</p>

<p><code>mkvirtualenv &lt;env_name&gt; -p path/to/python</code>
でどのpythonを仮想環境で使うか指定できる。</p>

<p><code>mkvirtualenv &lt;env_name&gt; --no-site-packages</code>
で元環境のsite-packagesを使わずにすむ。</p>

<p>ていうかこのオプションがないと元環境のpythonの方のライブラリを参照・追加してしまう。
これはデフォルトでこうなってるべきじゃないのか&hellip;</p>

<p>python3.3以降ではvenvっていうvirtualenv的なものが公式でサポートされたみたいだけど、virtualenvwrapperがある分まだvirtualenvのが使いやすそうな印象を受けた。</p>

<p>Pythonのバージョン管理でPythonzってのがあるらしいけど、今のところはバージョン管理必要ないのでHomeBrewで元環境に直接2系と3系入れてそれをvirtualenvで指定して使うことにする。</p>

<h2>終わりに</h2>

<p>こんな感じです！！これからPythonistとして精進していきます！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺的Python気になった所まとめ2]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/09/python2/"/>
    <updated>2014-06-09T21:59:30+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/09/python2</id>
    <content type="html"><![CDATA[<p>
<img class="center" src="http://blog.r-nmt000.com/images/python.png">
</p>


<p><a href="http://blog.r-nmt000.com/blog/2014/06/09/python1/"> 俺的Python気になった所まとめ1の続き </a></p>

<!-- more -->


<h2>リストの内包表記</h2>

<p>forとかifとかを使ってぴゃっ！とリストが作れるっぽい。
こんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">vec</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">vec</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">18</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">[[</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">vec</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">[[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">16</span><span class="p">][</span><span class="mi">6</span><span class="p">,</span><span class="mi">36</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="n">vec2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">vec1</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">vec2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="o">-</span><span class="mi">18</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">36</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="o">-</span><span class="mi">54</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>さらにネストしたリストの内包表記なんてのもある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mat</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="p">[[</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">mat</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはこのコードと同値らしい</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]:</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">mat</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">],</span>
</span><span class='line'>  <span class="k">print</span>
</span></code></pre></td></tr></table></div></figure>


<h2>集合型</h2>

<ul>
<li>重複する要素がない、順序づけられてない要素の集まり</li>
<li>結合(Union), 交差(Intersection), 差分(Difference), 対称差(Symmetric difference)といった演算をサポート</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">basket</span> <span class="o">=</span> <span class="p">[</span> <span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;orange&quot;</span><span class="p">,</span> <span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;pear&quot;</span><span class="p">,</span> <span class="s">&quot;orange&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">fruit</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">basket</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">set</span><span class="p">([</span><span class="s">&quot;orange&quot;</span><span class="p">,</span> <span class="s">&quot;pear&quot;</span><span class="p">,</span> <span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">])</span>
</span><span class='line'><span class="s">&#39;orange&#39;</span> <span class="ow">in</span> <span class="n">fruit</span>                 <span class="c"># 高速なメンバシップテスト</span>
</span><span class='line'><span class="o">&gt;</span> <span class="bp">True</span>
</span><span class='line'> <span class="s">&#39;crabgrass&#39;</span> <span class="ow">in</span> <span class="n">fruit</span>
</span><span class='line'> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>二つの単語の文字を例にした集合間の演算</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;abracadabra&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;alacazam&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span>                                  <span class="c"># a 内の一意な文字</span>
</span><span class='line'><span class="o">&gt;</span><span class="nb">set</span><span class="p">([</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">a</span> <span class="o">-</span> <span class="n">b</span>                              <span class="c"># a にあって b にない文字</span>
</span><span class='line'><span class="o">&gt;</span><span class="nb">set</span><span class="p">([</span><span class="s">&#39;r&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">a</span> <span class="o">|</span> <span class="n">b</span>                              <span class="c"># a か b にある文字</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;z&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>                              <span class="c"># a と b の双方にある文字</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">a</span> <span class="o">^</span> <span class="n">b</span>                              <span class="c"># a または b の片方だけにある文字</span>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="s">&#39;r&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;z&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<h2>辞書</h2>

<p>おなじみkey-value型。keyは変更不可能な型になる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tel</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;jack&#39;</span><span class="p">:</span> <span class="mi">4098</span><span class="p">,</span> <span class="s">&#39;sape&#39;</span><span class="p">:</span> <span class="mi">4139</span><span class="p">}</span>
</span><span class='line'><span class="n">tel</span><span class="p">[</span><span class="s">&#39;guido&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4127</span>
</span><span class='line'><span class="n">tel</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">{</span><span class="s">&#39;sape&#39;</span><span class="p">:</span> <span class="mi">4139</span><span class="p">,</span> <span class="s">&#39;guido&#39;</span><span class="p">:</span> <span class="mi">4127</span><span class="p">,</span> <span class="s">&#39;jack&#39;</span><span class="p">:</span> <span class="mi">4098</span><span class="p">}</span>
</span><span class='line'><span class="n">tel</span><span class="p">[</span><span class="s">&#39;jack&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4098</span>
</span><span class='line'><span class="k">del</span> <span class="n">tel</span><span class="p">[</span><span class="s">&#39;sape&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">tel</span><span class="p">[</span><span class="s">&#39;irv&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4127</span>
</span><span class='line'><span class="n">tel</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">{</span><span class="s">&#39;guido&#39;</span><span class="p">:</span> <span class="mi">4127</span><span class="p">,</span> <span class="s">&#39;irv&#39;</span><span class="p">:</span> <span class="mi">4127</span><span class="p">,</span> <span class="s">&#39;jack&#39;</span><span class="p">:</span> <span class="mi">4098</span><span class="p">}</span>
</span><span class='line'><span class="n">tel</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">[</span><span class="s">&#39;guido&#39;</span><span class="p">,</span> <span class="s">&#39;irv&#39;</span><span class="p">,</span> <span class="s">&#39;jack&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;guido&#39;</span> <span class="ow">in</span> <span class="n">tel</span>
</span><span class='line'><span class="o">&gt;</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h2>論理和論理積</h2>

<p> &amp;, | とand, or が使える</p>

<h2>.pycファイル</h2>

<p>バイトコンパイルされたpythonファイル</p>

<h2>パッケージ</h2>

<p>sysモジュールのpath内に記述されているサブディレクトリをパッケージと呼ぶらしい。
ただし、ただpath内にディレクトリを置くだけではパッケージとしては認識されず、
各ディレクトリに<strong>init</strong>.py(空でよい)を置いておく必要がある。</p>

<p>以下パッケージのディレクトリ構造例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sound</span><span class="o">/</span>
</span><span class='line'>   <span class="n">effects</span><span class="o">/</span>
</span><span class='line'>     <span class="n">echo</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>次のようにimportし、使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sound.effects.echo</span>
</span><span class='line'><span class="n">sound</span><span class="o">.</span><span class="n">effects</span><span class="o">.</span><span class="n">echo</span><span class="o">.</span><span class="n">echofilter</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">delay</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span><span class="n">atten</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしくは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sound.effects</span> <span class="kn">import</span> <span class="n">echo</span>
</span><span class='line'><span class="n">echo</span><span class="o">.</span><span class="n">echofilter</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">delay</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">atten</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしくは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sound.effects.echo</span> <span class="kn">import</span> <span class="n">echofilter</span>
</span><span class='line'><span class="n">echofilter</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">delay</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">atten</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>モジュール、パッケージのインポート</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">package</span> <span class="kn">import</span> <span class="n">module</span>
</span></code></pre></td></tr></table></div></figure>


<p>の形式で行える。が、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span>
</span><span class='line'>  <span class="n">main</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>  <span class="n">sub1</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>  <span class="n">dir1</span>
</span><span class='line'>    <span class="n">dir2</span>
</span><span class='line'>      <span class="n">sub2</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようなディレクトリ構造のときに
<code>sub1.py</code>はmain.pyに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sub1</span>
</span></code></pre></td></tr></table></div></figure>


<p>と記述することででインポートできるが<code>sub2.py</code>は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">dir1.dir2</span> <span class="kn">import</span> <span class="n">sub2</span>
</span></code></pre></td></tr></table></div></figure>


<p>としてもインポートできない。なんでだろう&hellip;</p>

<p>一応<code>sys.path.append('dir1/dir2')</code>としたり<code>PYTHONPATH</code>に<code>dir1/dir2/</code>を追加することで対応できたけど、いちいちそんなことするのめんどくさすぎる。</p>

<p>なにか他に解決策はないものか&hellip;</p>

<p><strong>追記</strong></p>

<p>上記の上手くインポート出来ない原因はvimの<code>quickrun</code>プラグインによるものだった。</p>

<p>通常のpythonコマンドを使った実行ならば正常に動作した</p>

<h2>if<strong>name</strong>==&ldquo;<strong>main</strong>&rdquo;</h2>

<p>そのpythonファイルがメインで実行された時、<code>if__name__=="__main__"</code>以下が実行される。
そのpythonファイルがモジュールとして他のモジュールに取り込まれた時は実行されない。</p>

<p><code>if__name__=="__main__"</code>以下をみればその関数をどのように動かせばよいかわかるので注釈としても便利</p>

<hr />

<p><a href="http://blog.r-nmt000.com/blog/2014/06/09/python3/">俺的Python気になった所まとめ3</a>へ続く&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺的Python気になった所まとめ1]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/09/python1/"/>
    <updated>2014-06-09T21:26:47+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/09/python1</id>
    <content type="html"><![CDATA[<p>
<img class="center" src="http://blog.r-nmt000.com/images/python.png" >
</p>


<p>Python Tutoria(2.7)を終えて個人的に気になった、つまったところまとめ。</p>

<!-- more -->


<h2>Pythonという言葉</h2>

<p>ニシキヘビを英語でPythonというらしい。知らなかった。</p>

<h2>２系と３系</h2>

<p>3系は後方互換を持っていない。2系と少し使用が異なる点がある。</p>

<p>2系は元々Macに入ってる。
3系は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew instal python3</span></code></pre></td></tr></table></div></figure>


<p>で入れられる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pyhton test.py
</span><span class='line'>python3 test.py</span></code></pre></td></tr></table></div></figure>


<p>でそれぞれ実行</p>

<p>今回は2系を勉強した。</p>

<h2>タブとスペース</h2>

<p>pythonではブロックの区切りにかっこでなくインデントを使うため、タブとスペースが混じると
IndentationErrorになってしまう。エディタでオートインデントをオンにして、オートインデントではタブ、手動インデントではスペースみたいな状況になってると悲惨なことになるので注意。</p>

<h2>フォーマット指定</h2>

<p>input(&ldquo;input something %d: &rdquo; % i)</p>

<h2>for文</h2>

<p><code>for i in object</code> の形式のみ</p>

<p>range関数と組み合わせて使う事が多い</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、for, whileループはelse節を持つことができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="k">print</span> <span class="n">n</span><span class="p">,</span> <span class="s">&#39;equals&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="s">&#39;*&#39;</span><span class="p">,</span> <span class="n">n</span><span class="o">/</span><span class="n">x</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="c">#因数が見つからずにループが終了</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">n</span><span class="p">,</span> <span class="s">&#39;is a prime number&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ループが終了した時にelse節を実行する。breakした時は実行されない。</p>

<h2>pass文</h2>

<p>pass文はなにもしない。処理をからっぽの関数とかクラスとかを書く必要があるときに使う</p>

<h2>タプル</h2>

<p>タプルは値を変更できないリスト</p>

<h2>関数の引数のデフォルト値</h2>

<p>関数の引数にデフォルト値を設定できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">idef</span> <span class="n">ask_ok</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">retries</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">complaint</span><span class="o">=</span><span class="s">&#39;Yes or no, please!&#39;</span><span class="p">):</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ok</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">ok</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;y&#39;</span><span class="p">,</span> <span class="s">&#39;ye&#39;</span><span class="p">,</span> <span class="s">&#39;yes&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">ok</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;n&#39;</span><span class="p">,</span> <span class="s">&#39;no&#39;</span><span class="p">,</span> <span class="s">&#39;nop&#39;</span><span class="p">,</span> <span class="s">&#39;nope&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>  <span class="n">retries</span> <span class="o">=</span> <span class="n">retries</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">retries</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">IOError</span><span class="p">(</span><span class="s">&#39;refusenik user&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">complaint</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意する点は、リストや辞書のような変更可能なオブジェクトの時に影響が出ること。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">L</span><span class="o">=</span><span class="p">[]):</span>
</span><span class='line'>  <span class="n">L</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">L</span>
</span><span class='line'><span class="k">print</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>` (グレーブアクセント)</h2>

<p>名前初めて知った。数字型の変数に対して使うとString型に変換してくれるっぽい。
ググったけど使い方が見つからなかった。そもそも記号はググりにくい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;10&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">num</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="sb">`num`</span> <span class="o">+</span> <span class="nb">str</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">20</span>
</span><span class='line'><span class="mi">1010</span>
</span></code></pre></td></tr></table></div></figure>


<h2>リストをキューとして扱う</h2>

<p>標準のリストでも実現できるけど、collections.dequeを使ったほうがいいらしい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collecitons</span> <span class="kn">import</span> <span class="n">deque</span>
</span><span class='line'><span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="s">&quot;Eric&quot;</span><span class="p">,</span> <span class="s">&quot;john&quot;</span><span class="p">,</span> <span class="s">&quot;Michel&quot;</span><span class="p">])</span>
</span><span class='line'><span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;Terry&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">queur</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;Graham&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">queue</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="s">&quot;Eric&quot;</span>
</span><span class='line'><span class="n">queue</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="s">&quot;John&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>累乗</h2>

<p>**を使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">2</span><span class="o">**</span><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<h2>末尾のカンマ</h2>

<p>要素をひとつ持つタプルを表現しているらしい</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">singleton</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>ちょっと長くなるので記事を区切る。</p>

<p><a href="http://blog.r-nmt000.com/blog/2014/06/09/python2/">俺的Python気になった所まとめ2</a>へ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressで謎のLiquid Exception]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/07/octopress/"/>
    <updated>2014-06-07T01:13:24+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/07/octopress</id>
    <content type="html"><![CDATA[<p>久しぶりにブログ書いて<code>rake generate</code>したら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Liquid Exception: undefined method `sort!' for nil:NilClass in ... </span></code></pre></td></tr></table></div></figure>


<p>なるエラーで怒られた。</p>

<!-- more -->


<p>ググると<a href="http://daisukekobayashi.com/blog/escape-liquid-template-tags-in-octopress">Liquidタグをエスケープする</a>という記事があったけどそんなタグ使った覚えがない。</p>

<p>なんでだろうとよくよく調べると前回書きかけの記事のマークダウンファイルを、通常は<code>source/_post</code>以下に置くところを<code>source/tmp</code>フォルダを作ってそこに避けて置いたのを見つけた。で、これを外に除けたらエラーが消えた。</p>

<p>なんかよくわからんけど、よかったよかった(<em>^^</em>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My favorite mottoes]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/06/07/others/"/>
    <updated>2014-06-07T00:39:14+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/06/07/others</id>
    <content type="html"><![CDATA[<h1>座右の銘</h1>

<p>エンジニアとして、いつも心に留めておこうと思う言葉。</p>

<!-- more -->


<blockquote><p>It is not the strongest of the species that survive, nor the most intelligent but the ones most responsive to change.</p>

<p>生き残るのは最も強い者でも最も賢い者でもない。最も変化に適応できる者だ。</p>

<p>(Charles Robert Darwin)</p></blockquote>

<p>そして、</p>

<blockquote><p>Shut the fxxk up and write some code.</p>

<p>ぐだぐだ言ってないでコードを書けよ、ハゲ。</p>

<p>(ゆーすけべー)</p></blockquote>

<p>どっちも大切なことだね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TerminalからiTerm2に乗り換えたらVimの色表示が狂った話]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/04/10/vim/"/>
    <updated>2014-04-10T13:45:17+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/04/10/vim</id>
    <content type="html"><![CDATA[<p><img src="http://blog.r-nmt000.com/images/iterm2.jpg" alt="iterm2" /></p>

<p>iTerm2は縦にウィンドウ分割できてアツい！って聞いたので乗り換えたところ
Vimの背景が白っぽくなってすごい見づらくなってしまった問題を解決したときの備忘録です。</p>

<!-- more -->


<h2>問題発生までの流れ</h2>

<ol>
<li>iTerm2を入れる</li>
<li>iTerm2でカラースキームの設定ができることを知りやってみる</li>
<li>zshが見やすくなってうはうは</li>
<li>vimを開いたところ背景が白っぽくなり見づらい</li>
<li>vimの設定を変更するも問題解決できず</li>
</ol>


<h2>解決方法</h2>

<p>iTerm2の<code>Preference</code>→<code>Colors</code>の画像の部分の色を調整することで修正できました。</p>

<p><img src="http://blog.r-nmt000.com/images/iterm.jpg" alt="iTerm2" /></p>

<p>普通だったら背景のところには<code>Background</code>に指定してある色がくるはずなのですが、
vimでは反映されず代わりに<code>Black</code>で指定されている色が反映されているようでした。</p>

<p>そのため僕がiTerm2で設定したカラースキームでは薄い黒が<code>Black</code>に指定されていたので、今回のようなことが起きたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SBT Libraries and Plugins]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/04/08/scala-sbt/"/>
    <updated>2014-04-08T00:10:53+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/04/08/scala-sbt</id>
    <content type="html"><![CDATA[<h1>ある日のぼく</h1>

<p><strong>ぼくはSBTのプラグインを入れようとしていました。</strong></p>

<p>ぼく「sbteclipse-plugin入れたいなあ^^ なになに、<code>project/plugins.sbt</code>に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resolvers += Classpaths.typesafeResolver
</span><span class='line'>
</span><span class='line'>addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.4.0"</span></code></pre></td></tr></table></div></figure>


<p>って書けばいいのかなるほど！」</p>

<p>ぼく「でも<code>"com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.4.0"</code>って<code>project/Build.scala</code>の<code>LibraryDependencies</code>と同じ書式だけどこっちに書いちゃダメなのかなあ。書いてみよう！」←動かず</p>

<p>ぼく「てかそもそも<code>project/plugins.sbt</code>とか<code>project/Build.scala</code>とか<code>Build.sbt</code>とかなんなんだっけ？どういう関係だっけ？調べてみよう！」</p>

<!-- more -->


<h2><a href="http://scalajp.github.io/sbt-getting-started-guide-ja/">ここ</a>に全て書いてあるけど自分なりにまとめたよ！</h2>

<p>SBTのビルド定義やらライブラリの依存性やら何度勉強しても忘れるのでここで一発まとめちゃおうと思います！！</p>

<p>今回は以下のディレクトリ構造を想定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello/
</span><span class='line'> build.sbt
</span><span class='line'>
</span><span class='line'> project/
</span><span class='line'>  Build.scala
</span><span class='line'>  plugins.sbt</span></code></pre></td></tr></table></div></figure>


<h3>ライブラリ？プラグイン？</h3>

<p>そもそも今回の問題は自分の中でライブラリとプラグインの定義が曖昧だったことが始まりでした。SBTで言うところのプラグインの追加とは、</p>

<blockquote><p><strong>ビルド定義にライブラリ依存性を追加することを意味する。</strong></p></blockquote>

<p>らしいです。</p>

<p>SBTではプロジェクト(上記のhelloとします)のビルド定義は<code>build.sbt</code>と<code>project/Build.scala</code>に記述します。各ファイルにプロジェクト名やScalaのバージョンやビルドスルために必要なライブラリを書いてあげることをビルド定義と呼ぶわけです。</p>

<p>そしてプラグインとはこのビルド定義の拡張に他なりません。他ならないそうです。</p>

<p>ですので、<strong>このビルド定義に対してまたビルド定義</strong>してあげることがプラグインの追加になるそうです。</p>

<h2>SBTの再帰構造</h2>

<p>SBTではビルド定義自体をまたプロジェクトとして扱うことができます。つまり、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello/
</span><span class='line'> build.sbt
</span><span class='line'>
</span><span class='line'> project/
</span><span class='line'>  Build.scala
</span><span class='line'>  plugins.sbt
</span><span class='line'>  project/
</span><span class='line'>   Build.scala
</span><span class='line'>   plugins.sbt   
</span><span class='line'>   project/
</span><span class='line'>    Build.scala
</span><span class='line'>    plugins.sbt   
</span><span class='line'>      ...</span></code></pre></td></tr></table></div></figure>


<p>な感じでビルド定義のビルド定義のビルド定義の&hellip;みたいなことができちゃうわけです。</p>

<p>ようは<code>build.sbt</code>と<code>plugins.sbt</code>は役割的には同じなわけです。ただ、対象とするプロジェクトが異なりますということです。</p>

<h2>まとめ</h2>

<p>書いてたら眠くなったのでこの辺にしときます！</p>

<p>SBTプロジェクト内のファイル関係はこれである程度頭に入ったはず！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala + akka]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/04/02/scala-akka/"/>
    <updated>2014-04-02T01:10:16+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/04/02/scala-akka</id>
    <content type="html"><![CDATA[<h1>Scalaのakkaを試してみた</h1>

<p><img src="http://blog.r-nmt000.com/images/akka.jpg" alt="akka" /></p>

<p>そういやScala始めてしばらくになるけどakka触ったことなかったなあこれはやばいなあということでちょっと勉強してみました。</p>

<!-- more -->


<h2>akkaって？</h2>

<p>Scala2.10から公式に標準装備された並列分散処理のためのScala, Java用フレームワークだそうです。</p>

<p><a href="http://akka.io/">akka公式サイト</a></p>

<h2>じゃあ使ってみよう</h2>

<p><a href="http://akka.io/docs/">akka公式サイト</a>によると最新バージョンは2.3.1だそうな、ふむふむ&hellip;さっそく<a href="http://doc.akka.io/docs/akka/2.3.1/intro/getting-started.html">Gettinng Started</a>をやってみるか</p>

<p>Akka 「Akkaを勉強する一番いい方法はTypesafe Activatorをダウンロードしてテンプレートを試すことだよ^^ 」</p>

<p>ぼく 「あ、そうなの？じゃあそれ試してみよう」</p>

<p>一時間後&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>　　　　　　　 ＿＿＿_
</span><span class='line'>　　　　　　／　　 　 　＼　
</span><span class='line'>　　　　 ／　　─　 　 ─   ＼  全然わからねえ...
</span><span class='line'>　　　／ 　　 （○） 　（○） ＼
</span><span class='line'>　 　 |　 　　 　 （__人__） |　　 ＿＿＿＿＿＿＿＿＿__
</span><span class='line'>　　　＼　　　 　 ｀ ⌒´　　,／　.| |　　　　　　　 　　|
</span><span class='line'>　　　ノ　　　　　　　　　　　＼ .| |　　　　　　　 　　|
</span><span class='line'>.　／´　　　　　　　　 　 　 　  | |　　　　    　  　 |
</span><span class='line'>　|　　　　ｌ　　　　　　　　　   | |　　　　　　　 　　|
</span><span class='line'>　ヽ　　　 -一ー_~､⌒)^),-､　　  .|_|_＿＿＿＿_＿＿＿＿_|
</span><span class='line'>　　ヽ ＿＿＿＿,ノγ⌒ヽ)ニニニニ　   　 ＿|_|＿_|＿</span></code></pre></td></tr></table></div></figure>


<p>なんだよソースだけ渡されてもわかんねーよ！！もっと言葉で伝えてくれなきゃわかんねーよオレを誰だと思ってんだ！！ヾ(<em>｀Д´</em>)ﾉ&#8221;</p>

<p>てな感じで悪戦苦闘してググるも、なかなかよい情報が見つからず&hellip;</p>

<p>で、よくよくみたら<a href="http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html">akka 2.0.2</a>ではπを求める計算をサンプルに非常に丁寧に説明されていた&hellip;このチュートリアルでいいじゃん&hellip;なんでTypesafe Activatorとかいうのインストールさせたんだよクソが&hellip;</p>

<p>とか思いつつバージョンが微妙に古いので上手く行かなかったりで適宜書き換えつつ、サンプルを使ってお勉強しました。なるほど、大まかな流れはつかめたぞ！</p>

<p>個人的にポイントだなと感じたのは以下の点です！<a href="http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html">akka 2.0.2</a>を読みながら(むしろそちらメインで)読んでいただくと非常にわかりやすいかと！</p>

<ol>
<li>Actor</li>
<li>メッセージパッシング</li>
<li>ルータ</li>
</ol>


<h2>Actor</h2>

<p>akkaの並列処理では<code>Actor</code>というものを使うそうです。Actorとは、Javaの並列処理というで使うスレッドをイメージしてもらえればオッケーかと思います。ただしActorを特徴づけるのが、Actorがお互いにメッセージのやりとりをして処理を進めていく点です。</p>

<h2>メッセージパッシング</h2>

<p>Actorはメッセージのやりとりをして処理を進めていくと書きましたが、そのための仕組みがメッセージパッシングです。ちょっとサンプルソースを見てみましょう。(今気づいたけどPiApproximationはPiMessage継承してないけどいいのかな&hellip;一応動いちゃいるけども)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Calculate</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Work</span><span class="o">(</span><span class="n">start</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Result</span><span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">PiApproximation</span><span class="o">(</span><span class="n">pi</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">duration</span><span class="k">:</span> <span class="kt">Duration</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記ではπの計算に使うメッセージを定義しています。パターンマッチで使うので<code>case class</code>で宣言しているようです。
それぞれのメッセージはそれぞれ次のActor間で使用されます。</p>

<table>
<thead>
<tr>
<th> </th>
<th> Actor        </th>
<th align="center"> 役割           </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td> </td>
<td> Worker      </td>
<td align="center"> 実際に計算を行なう</td>
<td></td>
</tr>
<tr>
<td> </td>
<td> Master      </td>
<td align="center"> 処理の起点、Workerの計算結果をまとめる</td>
<td>  </td>
</tr>
<tr>
<td> </td>
<td> Listener    </td>
<td align="center"> 結果をprintする      </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>こちらがActorの定義です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Worker</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="k">def</span> <span class="n">calculatePiFor</span><span class="o">(</span><span class="n">start</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span><span class="k">:</span><span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="n">acc</span> <span class="k">=</span> <span class="mf">0.0</span>
</span><span class='line'>   <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">start</span> <span class="n">until</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">nrOfElements</span><span class="o">))</span>
</span><span class='line'>     <span class="n">acc</span> <span class="o">+=</span> <span class="mf">4.0</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span><span class="o">-</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>   <span class="n">acc</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Work</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>   <span class="n">sender</span> <span class="o">!</span> <span class="nc">Result</span><span class="o">(</span><span class="n">calculatePiFor</span><span class="o">(</span><span class="n">start</span><span class="o">,</span><span class="n">nrOfElements</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各ActorはActorクラスを継承して定義します。
注目して欲しいのがreceiveメソッドです。receiveメソッドはそのActorがなんらかのメッセージを受け取った時に呼ばれるメソッドです。パターンマッチを使用でき、
メッセージの種類に応じて処理を変えることができます。</p>

<p>メッセージの送信は、<code>!</code>を使って</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">master</span> <span class="o">!</span> <span class="n">culculate</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように行います。master Actorにculculateメッセージを送るという意味です。</p>

<p>メッセージを受け取ってから処理を送信者へ返す場合は<code>sender</code>が予約されているのでそれを使いましょう。</p>

<p>ちなみにメッセージは無理に定義しなくてもIntとかStringとかも使えるようです。</p>

<h2>ルータ</h2>

<p>Master内でこのルータを宣言しています。ルータはそれぞれのWorkerに等しい量のタスクを振り分けるのに使われているようです。</p>

<p>この辺はもうちょっと勉強がいりますが、要はMasterがWorkerを作り各Workerに処理を振り分けているということだと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Master</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfMessages</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">listener</span><span class="k">:</span> <span class="kt">ActorRef</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">pi</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">nrOfResults</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">val</span> <span class="n">workerRouter</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">Worker</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">RoundRobinRouter</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="o">)),</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;workerRouter&quot;</span><span class="o">)</span>
</span><span class='line'>              
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// handle messages ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>                                  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>全体の流れ</h2>

<p>全体の流れはこんな感じです。</p>

<ol>
<li>処理に必要なActorを定義する(今回はMaster,Worker,Listener)</li>
<li>Actor間のやりとりに必要なメッセージを定義する</li>
<li>Masterが処理の起点、各Workerの処理を割り振る</li>
<li>Workerの処理が全て終わったら結果をマージ、Listenerへ投げる</li>
<li>Listenerで結果表示(Listenerってなんでいるんだろう&hellip;?）</li>
</ol>


<p>以下が全ソースコードです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.routing._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Calculate</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Work</span><span class="o">(</span><span class="n">start</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Result</span><span class="o">(</span><span class="n">value</span><span class="k">:</span><span class="kt">Double</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">PiMessage</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">PiApproximation</span><span class="o">(</span><span class="n">pi</span><span class="k">:</span><span class="kt">Double</span><span class="o">,</span> <span class="n">duration</span><span class="k">:</span><span class="kt">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Worker</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">calculatePiFor</span><span class="o">(</span><span class="n">start</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span><span class="k">:</span><span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">acc</span> <span class="k">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">start</span> <span class="n">until</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">nrOfElements</span><span class="o">))</span>
</span><span class='line'>      <span class="n">acc</span> <span class="o">+=</span> <span class="mf">4.0</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span><span class="o">-</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">acc</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Work</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sender</span> <span class="o">!</span> <span class="nc">Result</span><span class="o">(</span><span class="n">calculatePiFor</span><span class="o">(</span><span class="n">start</span><span class="o">,</span><span class="n">nrOfElements</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Master</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span><span class="n">nrOfMessages</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="nc">Listener</span><span class="k">:</span><span class="kt">ActorRef</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">pi</span><span class="k">:</span><span class="kt">Double</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">nrOfResults</span><span class="k">:</span><span class="kt">Int</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span><span class="k">:</span><span class="kt">Long</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">workersRouter</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">Worker</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">RoundRobinRouter</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="o">)),</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;workersRouter&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Calculate</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">nrOfMessages</span><span class="o">)</span> <span class="n">workersRouter</span> <span class="o">!</span> <span class="nc">Work</span><span class="o">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">nrOfElements</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Result</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">pi</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class='line'>      <span class="n">nrOfResults</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">nrOfResults</span> <span class="o">==</span> <span class="n">nrOfMessages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="nc">Listener</span> <span class="o">!</span> <span class="nc">PiApproximation</span><span class="o">(</span><span class="n">pi</span><span class="o">,</span> <span class="n">duration</span> <span class="k">=</span> <span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">-</span> <span class="n">start</span><span class="o">))</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="n">stop</span><span class="o">(</span><span class="n">self</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Listener</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">PiApproximation</span><span class="o">(</span><span class="n">pi</span><span class="o">,</span> <span class="n">duration</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Pi approximation: %s\nCalculation time: %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">pi</span><span class="o">,</span><span class="n">duration</span><span class="o">))</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">object</span> <span class="nc">AkkatestApp</span><span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span><span class="kt">Unit</span>  <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">input</span> <span class="k">=</span> <span class="n">readLine</span><span class="o">(</span><span class="s">&quot;1:sequence 2:parallel\n&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">&quot;1&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">calculate</span><span class="o">(</span><span class="n">nrOfWorkers</span> <span class="k">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">nrOfElements</span> <span class="k">=</span> <span class="mi">10000</span><span class="o">,</span> <span class="n">nrOfMessages</span> <span class="k">=</span> <span class="mi">10000</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">calculate</span><span class="o">(</span><span class="n">nrOfWorkers</span> <span class="k">=</span> <span class="mi">4</span><span class="o">,</span> <span class="n">nrOfElements</span> <span class="k">=</span> <span class="mi">10000</span><span class="o">,</span> <span class="n">nrOfMessages</span> <span class="k">=</span> <span class="mi">10000</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;wrong num&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">calculate</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">nrOfMessages</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">&quot;PiSystem&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">listener</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">Listener</span><span class="o">],</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;listener&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">master</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Master</span><span class="o">(</span><span class="n">nrOfWorkers</span><span class="o">,</span> <span class="n">nrOfMessages</span><span class="o">,</span> <span class="n">nrOfElements</span><span class="o">,</span> <span class="n">listener</span><span class="o">)),</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;master&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">master</span> <span class="o">!</span> <span class="nc">Calculate</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>こちらが今回参考にさせていただいたサイトです。</p>

<p><a href="http://labs.enrapt.jp/2013/03/scalaakka.html">SclaのAkka入門</a></p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1209/06/news134.html">Scalaの並行処理とアクター、並列コレクション</a></p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1209/06/news134.html">Scala + akka で簡単なチャットサーバを書いてみたので開設してみるよ</a></p>

<p><a href="http://tuvistavie.com/posts/6-getting-started-with-scala-akka-actors?locale=ja">Scalaのakka actorsを使いはじめる</a></p>

<p>まだまだakkaの入り口に立った程度ですがこの程度のことでも情報がなくてかなり時間がかかってしまった&hellip;</p>

<p>もっと頑張って勉強します！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[未来を感じるインタフェースを作るスタートアップ7つ]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/01/25/interface-startup/"/>
    <updated>2014-01-25T13:45:19+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/01/25/interface-startup</id>
    <content type="html"><![CDATA[<p><img src="http://blog.r-nmt000.com/images/future.jpg" alt="future" /></p>

<p>近年はwebだけでなく実際にデバイスを作っているスタートアップも増えています。
ここではそうしたスタートアップの中でも未来を感じるインタフェースで世界を変えようとしているスタートアップを紹介します。</p>

<!-- more -->


<h2>ジェスチャー</h2>

<h3>Ring</h3>

<p><img src="http://blog.r-nmt000.com/images/ring.jpg" alt="Ring" /></p>

<iframe src="http://blog.r-nmt000.com//player.vimeo.com/video/74626545" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/74626545">Ring -Shorcut Everything-</a> from <a href="http://vimeo.com/user7740853">Logbar</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>

<p>&ldquo;Shortcut Everything&#8221;を表題にジェスチャーで全てを操作しようというデバイスがRing。
日本発のベンチャーでスタートアップの祭典SF JapanNightで優勝しました。
動画を見ていただければわかりますが、すごい&hellip; カーテン、テレビ、音楽のボリューム、連絡先の交換までショートカットしてしまっています。
この動画の未来が訪れたらと考えるだけでワクワクしますね！</p>

<ul>
<li>コンセプトムービー <a href="http://vimeo.com/74626545">http://vimeo.com/74626545</a></li>
</ul>


<h3>MYO</h3>

<p><img src="http://blog.r-nmt000.com/images/myo.jpg" alt="MYO" /></p>

<iframe src="http://player.vimeo.com/video/37562944" width="560" height="315" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>


<p>MYOは指ではなく、腕に取り付けるタイプのジェスチャーデバイスです。
筋肉の動きを読み取ることでジェスチャーを認識しています。
Ringと決定的に違うのは、Ringがショートカットコマンドと対応する動きを覚える必要があるのに対し、
MYOは筋肉の動きを読み取っているのでより柔軟なジェスチャー操作が可能という点です。
FPSにおける銃の上げ下ろしといった操作をナチュラルに再現することができます。</p>

<ul>
<li>公式サイト <a href="https://www.thalmic.com/en/myo/">https://www.thalmic.com/en/myo/</a></li>
</ul>


<h3>mycestro</h3>

<p><img src="http://blog.r-nmt000.com/images/mycestro.jpg" alt="mycestro" /></p>

<iframe width="480" height="360" src="https://www.kickstarter.com/projects/mycestro/mycestrotm-the-next-generation-3d-mouse/widget/video.html" frameborder="0" scrolling="no"> </iframe>


<p>キーボードとマウスの移動が煩わしいと思ったことはありませんか？
mycestroはあなたのそんな悩みを解決します。
指につけるタイプのこのデバイスは、空中でまるで指揮者のように手を振るだけでカーソルを操作することができます。
できることはカーソルの操作に限られているので、上記2つと比べると夢がないかもしれませんが実用性は抜群だと思います。</p>

<ul>
<li>公式サイト <a href="http://www.mycestro.com/">http://www.mycestro.com/</a></li>
</ul>


<h2>脳波</h2>

<h3>Muse</h3>

<p><img src="http://blog.r-nmt000.com/images/muse.jpg" alt="muse" /></p>

<iframe src="http://player.vimeo.com/video/37562944" width="560" height="315" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>


<p>museはなんとユーザの脳をセンシングすることができるデバイスです。
ヘッドバンドタイプのこのデバイスは脳の活動を読み取り、集中度や興奮度を計測してスマホからそれらを確認することができます。
更に将来は脳内で思考するだけでスマホや家電といったデバイスを操作することも目指しているそうです。
もしそんなことが可能になったらかなり捗りますね&hellip; 現状音声やジェスチャーが最先端のインタフェースと言えそうですが、これが実現すればもはや身体を動かす必要すらないわけです。
個人的にはmuseを使ってテレパシーの様に人と人のコミュニケーションができたらなあ&hellip; と思っています。</p>

<ul>
<li>公式サイト <a href="http://www.interaxon.ca/">http://www.interaxon.ca/</a></li>
</ul>


<h2>ホログラム</h2>

<h3>Displair</h3>

<p><img src="http://blog.r-nmt000.com/images/displair.jpg" alt="displair" /></p>

<iframe width="560" height="315" src="http://blog.r-nmt000.com//www.youtube.com/embed/yEP7JewA2C8" frameborder="0" allowfullscreen></iframe>


<p>SFのように空中に浮かんだ仮想オブジェクトを操作することは人類の(少なくとも僕の)夢ですが、displairの登場で人類はその夢に一歩近づきました。
空気中に散出した蒸気に対して映像を照射することで仮想オブジェクトを表示し、手の動きをセンシングすることであたかも仮想オブジェクトを触って動かしているような操作感を実現しています。
動画を見てみるとかなりの精度のようです。
ホログラム系のデバイスは手へのフィードバック(実際に触った感覚)が現状課題となっているので、それを解決できればより素晴らしい製品になると思います。</p>

<ul>
<li>公式サイト<a href="http://displair.com/">http://displair.com/</a></li>
</ul>


<h2>その他</h2>

<h3>Oculus Rift</h3>

<p><img src="http://blog.r-nmt000.com/images/oculus.jpg" alt="oculus" /></p>

<iframe width="560" height="315" src="http://blog.r-nmt000.com//www.youtube.com/embed/GoQ0OXJCbaE" frameborder="0" allowfullscreen></iframe>


<p>Oculus Riftは没入感が半端ないHMDです。
視野角110度(通常のHMDは30~45度), 3D映像, 頭の動きとVR内の視点が連動して動くことでまさに仮想世界にいるような錯覚に陥ります。
僕もOculusでジェットコースターのVRを体験したことがありますが、普通に怖いです。ジェットコースターが下降しているときは本当に落ちているかのような錯覚に陥ります。</p>

<ul>
<li><a href="http://www.oculusvr.com/">http://www.oculusvr.com/</a></li>
</ul>


<h3>ARヘルメット</h3>

<p><img src="http://blog.r-nmt000.com/images/helmet.jpg" alt="helmet" /></p>

<iframe src='http://player.cnevids.com/embed/525d923b4ffb60655000000b/5176e89e68f9daff42000013' width='560' height='390' frameBorder='0' allowfullscreen webkitallowfullscreen mozallowfullscreen allowtransparency='true'></iframe>


<p>ARヘルメットはバイカーのための道案内ARヘルメットです。
ヘルメットのシールド部分に道案内の標識が表示されます。</p>

<ul>
<li>公式サイト <a href="http://nilmo.net/news/2_gadjet/2013/20130701_1.html">http://nilmo.net/news/2_gadjet/2013/20130701_1.html</a></li>
</ul>


<h2>近未来のコミュニケーション</h2>

<p>どのスタートアップも非常に未来的ですね。
ここでは6例紹介しましたが、市場に出ているデバイスはDisplairだけです。
こうした未来的デバイスが今後市場に出てくることにより、これから更に大きなムーブメントとなっていくことでしょう。</p>

<p>そして、デバイスが魅力的なことはもちろんですが、こうした製品を作っているスタートアップの方達は20代の方が多いです。
技術がなくても、面白いアイデアを持ち、実現させる情熱があればあなたにもこうした未来を作れるかもしれません。</p>

<p>あなたも新しい未来を作ってみませんか？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study abroad 1]]></title>
    <link href="http://blog.r-nmt000.com/blog/2014/01/14/english-canada/"/>
    <updated>2014-01-14T02:08:59+09:00</updated>
    <id>http://blog.r-nmt000.com/blog/2014/01/14/english-canada</id>
    <content type="html"><![CDATA[<p><img src="http://blog.r-nmt000.com/images/vancouver.jpg" alt="vancouver" /></p>

<h1>最小の費用で最大の効果を得る留学 1</h1>

<p>自分は2012年の10月から2013年の9月までカナダのバンクーバーってところで働いてました。
語学留学ってやつです。そのときの経験をここに記録して少しでも語学留学を考えている人の役に立てたらなと思います。</p>

<!-- more -->


<h4>注意1</h4>

<p>この記事では自分の考えや思いをなるべく<strong>本音</strong>で<strong>歯に衣着せぬ形</strong>で書いています。かなり<strong>主観的</strong>になっている箇所もあると思います。
読んでいて不快になる人がいたらごめんなさい。なにか意見があったらコメント欄に書いて貰えると嬉しいです。</p>

<h4>注意2</h4>

<p>この記事では</p>

<ol>
<li>いかに安く</li>
<li>いかに語学力の向上を最大化できるか</li>
</ol>


<p>を、主目的としています。海外に行く目的は様々です。異なる文化に触れたり、世界中に友達を作ったり、海外の大学で勉強したり色々あると思います。
ですので、上記の目的に沿わない人はもしかしたらこの記事は見当違いなことを言っているように感じるかもしれません。</p>

<h2>留学前の自分のスペック</h2>

<p>この記事はもちろん自分の経験を参考に書いているので、まずは自分が留学前にどの程度の英語力を持っていたかをここに示しておきます。</p>

<p><strong>TOEIC</strong>
730</p>

<p><strong>会話力</strong>
Skype英会話で3ヶ月くらい会話の練習してた。自己紹介はできる程度</p>

<p><strong>その他</strong></p>

<ul>
<li>英単語帳(Duo)を2周終わらせた。</li>
<li>大学受験でいうと恐らくMARCH入学程度の英語力はあったかと思う。</li>
</ul>


<p>留学は勿論会話力の向上が目的になるのですが、センター試験レベルのリスニング力と単語、文法力は日本で身につけていたほうがいいです。(逆にセンター以上のレベルは日常レベルでは出てこないので勉強しても無駄になるかもしれません)
海外にいる時間は限られているので、単語や文法を向こうで勉強するのはものすごい時間の無駄です。スタートダッシュするためにもやれることはやっときましょう。</p>

<p>個人的には<strong>Real英会話</strong>というiPhoneアプリがオススメです。このアプリでは日常会話で使われるフレーズを学習することができます。フレーズリストは毎日更新され、どんどん増えていきます。(2014年1月現在で3500前後あります)</p>

<p>なによりこのアプリが素晴らしいのは、それぞれのフレーズを会話の中でどのように使われるかを学べる点です。会話ベースで学べるので、ネイティブの会話のノリを学習できるのです。これは非常に大きいです。
自分は留学中にこのアプリを使い始めたのですが、留学前にやれば良かったと後悔しています。</p>

<iframe src="http://spsns.net/tools/app.php?url=https://itunes.apple.com/jp/app/real-ying-hui-hua/id373563219?mt=8" width="720" height="220" frameborder="0"></iframe>


<h2>なんでカナダか</h2>

<p>自分はせっかくならバッチリ英語を喋れるようになりたかったので1年休学することにしました。
短期ならフィリピンとかもいいと思います。安いし！</p>

<p>そんなわけで1年いくことにしたんですが、1年間語学学校に行くような金はありません。つまり、現地で労働する必要があったので<strong>ワーキングホリデービザ</strong>が取れる国に行く必要がありました。</p>

<h4>ワーキングホリデービザとは</h4>

<ul>
<li>1年間限定で学生にも労働者にもニートにもなれるビザ</li>
<li>ワークビザを取るのは基本的にはめっちゃ大変だがワーホリは簡単に取れる</li>
<li>しかも安い。確か1万円くらい</li>
<li>すなわち、最強のビザ</li>
</ul>


<p>このビザが無いと、基本的に僕のような留学生が働くことはできません。
日本から英語圏の国でワーホリが取れる国は、当時はカナダ、オーストラリア、ニュージーランド、イギリスでした(たぶんね)。
で、シリコンバレーにかなり憧れを抱いていた僕は帰りにアメリカ旅行して帰ろうと思ってカナダを選びました。</p>

<p>現地で働けば、</p>

<ol>
<li>学校ではない現地人のリアルな英語を学べる</li>
<li>ネイティブの友達ができる</li>
<li>仕事にもよるが生活費は全てペイできるので留学の初期費用だけ心配すれば良い</li>
</ol>


<p>といった恩恵を受けることができます。主観ですが、<strong>恋人を作る以外でこれ以上の英語学習法はないと思ってます</strong></p>

<h2>なに準備すればいいんだ？</h2>

<p>そうです。留学するぜ！ってなってもなにをどーすればいいかわかりません。そこで<strong>留学エージェント</strong>を使いましょう。
留学までに必要なものを色々教えてくれたり準備してくれたりします。便利！！</p>

<p>ただ、ここで問題があります。このエージェントには無料のところと有料のところがあるのです。
ここで僕の<strong>独断と偏見による</strong>無料と有料のエージェントの長所と短所を見てみましょう</p>

<p><strong>無料</strong></p>

<p>&lt;長所> なんといってもタダ。</p>

<p>&lt;短所> すげー<strong>インターンシップ</strong>を押してくる</p>

<p><strong>有料</strong></p>

<p>&lt;長所> <strong>無駄に</strong>サービスが手厚い, 結構本音で相談に乗ってくれるとこが多かった気がする。</p>

<p>&lt;短所> 手数料を取る。高い。なめてる。</p>

<p>ん？無料の短所のとこになんか書いてありますね。インターンシップ？</p>

<h4>インターンシップとは</h4>

<p>就業体験のこと。現地のオフィスでビジネス英語を学ぶことができる。たいてい無給。</p>

<p>最安で英語力アップを目指すには給料をもらう必要があるので、ここではインターンは選択肢から除外します</p>

<p>が、インターンを考えている人たちへ向けて少し。</p>

<p>恐らくエージェントは&#8221;ビジネス&#8221;や&#8221;オフィス&#8221;という言葉でインターンの素晴らしさを語りますが、大半は英語を使わない仕事になると思います。PCを使った書類整理等の雑用です。
あまりネガキャンはしたくないので多くは語りませんが、彼らがなぜインターンを強く押すのかと言うと<strong>インターン紹介料のため、金のためです。</strong>
そのことを頭においてインターンをするか考えてください。</p>

<p>エージェントについて話を戻します。</p>

<p>どうやってエージェントを使えばよいかということですが、いくつかのエージェントを回って相談してみてください。カウンセリングはタダですから。絶対一つじゃダメです。
そして、有料エージェントで色々相談して無料エージェントで実際に申し込むことをオススメします。</p>

<p>有料エージェントは有料だけあって結構親身に相談に乗ってくれるところも多いです。ありがたいですね。
そして自分の考えが固まったら<strong>無料エージェントで実際に申し込みましょう</strong>
こうすることで無料と有料のいいとこ取りをすることができます。</p>

<p><strong>大切なのはエージェント任せに絶対にしないことです。</strong>搾取されたくなければ自分のことは自分で決めましょう</p>

<h2>個人的に最安だと思う留学プラン(カナダ編)</h2>

<ul>
<li>語学学校1ヶ月        $700</li>
<li>ホームステイ1ヶ月  $700</li>
<li>海外保険                 $2000</li>
<li>航空券(片道)           $800</li>
<li>ワーホリビザ          $100</li>
<li>合計　　　　　　　$4300</li>
</ul>


<p>わお！安い！！まあこれはもちろん最低限必要な金額なので、生活費, 予備のお金等も必要になってきます。しかしそれを計算に入れても、初期費用で<strong>100万円</strong>あれば十分に1年間カナダで暮らせます。<strong>仕事が見つかればね＼(^o^)／</strong></p>

<p>語学学校とホームステイが1ヶ月なのは1ヶ月で十分慣れるからです。マジかよと思うかもしれないけどマジです。
そもそも足りないと思えば現地で期間は伸ばせるんだから1ヶ月でマジで十分です。</p>

<p>住居に関しては最初の1ヶ月はホームステイ、次月からはルームシェアが良いと思います。このへんに関してはまた改めて記事を書きます。</p>

<p>要するに、100万円というのは<strong>仕事が見つかるまでに必要な費用</strong>ということになります。</p>

<p>ここで試しに無料エージェント行って見積もりもらってきてみてください。多分語学学校とホームステイはもっと長期間のプランを薦めてくるはずです。
なぜなら学校とホームステイが長ければ長い程彼らは儲かるから。僕の周りには学校を半年や1年申し込んで2ヶ月くらいで学校行かなくなってお金を無駄にする人がたくさんいました。
エージェントはあの手この手であなたを説得し(割引等)長期間の契約を結ぼうとしますが、<strong>これ以上僕の友人のような犠牲者を出してはいけません</strong></p>

<p>長いんでちょっとこの辺で切ります。次回は学校、ホームステイ、現地に行ったあとの話から始めます。</p>

<h2>まとめ</h2>

<ol>
<li>ワーホリ熱いよ</li>
<li>インターンより働け</li>
<li>有料エージェントで相談し無料エージェントで申し込む</li>
</ol>

]]></content>
  </entry>
  
</feed>
