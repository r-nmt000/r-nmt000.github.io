<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: akka | NomoLog]]></title>
  <link href="http://r-nmt000.github.io/blog/tags/akka/atom.xml" rel="self"/>
  <link href="http://r-nmt000.github.io/"/>
  <updated>2014-04-10T15:29:46+09:00</updated>
  <id>http://r-nmt000.github.io/</id>
  <author>
    <name><![CDATA[r-nmt000]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala + akka]]></title>
    <link href="http://r-nmt000.github.io/blog/2014/04/02/scala-akka/"/>
    <updated>2014-04-02T01:10:16+09:00</updated>
    <id>http://r-nmt000.github.io/blog/2014/04/02/scala-akka</id>
    <content type="html"><![CDATA[<h1>Scalaのakkaを試してみた</h1>

<p><img src="/images/akka.jpg" alt="akka" /></p>

<p>そういやScala始めてしばらくになるけどakka触ったことなかったなあこれはやばいなあということでちょっと勉強してみました。</p>

<!-- more -->


<h2>akkaって？</h2>

<p>Scala2.10から公式に標準装備された並列分散処理のためのScala, Java用フレームワークだそうです。</p>

<p><a href="http://akka.io/">akka公式サイト</a></p>

<h2>じゃあ使ってみよう</h2>

<p><a href="http://akka.io/docs/">akka公式サイト</a>によると最新バージョンは2.3.1だそうな、ふむふむ&hellip;さっそく<a href="http://doc.akka.io/docs/akka/2.3.1/intro/getting-started.html">Gettinng Started</a>をやってみるか</p>

<p>Akka 「Akkaを勉強する一番いい方法はTypesafe Activatorをダウンロードしてテンプレートを試すことだよ^^ 」</p>

<p>ぼく 「あ、そうなの？じゃあそれ試してみよう」</p>

<p>一時間後&hellip;</p>

<p>```</p>

<p>　　　　　　　 ＿＿＿<em>
　　　　　　／　　 　 　＼　
　　　　 ／　　─　 　 ─   ＼  全然わからねえ&hellip;
　　　／ 　　 （○） 　（○） ＼
　 　 |　 　　 　 （<strong>人</strong>） |　　 ＿＿＿＿＿＿＿＿＿__
　　　＼　　　 　 ｀ ⌒´　　,／　.| |　　　　　　　 　　|
　　　ノ　　　　　　　　　　　＼ .| |　　　　　　　 　　|
.　／´　　　　　　　　 　 　 　  | |　　　　    　  　 |
　|　　　　ｌ　　　　　　　　　   | |　　　　　　　 　　|
　ヽ　　　 -一ー</em>~､⌒)^),-､　　  .|<em>|</em>＿＿＿＿<em>＿＿＿＿</em>|
　　ヽ ＿＿＿＿,ノγ⌒ヽ)ニニニニ　   　 ＿|<em>|＿</em>|＿
```</p>

<p>なんだよソースだけ渡されてもわかんねーよ！！もっと言葉で伝えてくれなきゃわかんねーよオレを誰だと思ってんだ！！ヾ(<em>｀Д´</em>)ﾉ"</p>

<p>てな感じで悪戦苦闘してググるも、なかなかよい情報が見つからず&hellip;</p>

<p>で、よくよくみたら<a href="http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html">akka 2.0.2</a>ではπを求める計算をサンプルに非常に丁寧に説明されていた&hellip;このチュートリアルでいいじゃん&hellip;なんでTypesafe Activatorとかいうのインストールさせたんだよクソが&hellip;</p>

<p>とか思いつつバージョンが微妙に古いので上手く行かなかったりで適宜書き換えつつ、サンプルを使ってお勉強しました。なるほど、大まかな流れはつかめたぞ！</p>

<p>個人的にポイントだなと感じたのは以下の点です！<a href="http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-scala.html">akka 2.0.2</a>を読みながら(むしろそちらメインで)読んでいただくと非常にわかりやすいかと！</p>

<ol>
<li>Actor</li>
<li>メッセージパッシング</li>
<li>ルータ</li>
</ol>


<h2>Actor</h2>

<p>akkaの並列処理では<code>Actor</code>というものを使うそうです。Actorとは、Javaの並列処理というで使うスレッドをイメージしてもらえればオッケーかと思います。ただしActorを特徴づけるのが、Actorがお互いにメッセージのやりとりをして処理を進めていく点です。</p>

<h2>メッセージパッシング</h2>

<p>Actorはメッセージのやりとりをして処理を進めていくと書きましたが、そのための仕組みがメッセージパッシングです。ちょっとサンプルソースを見てみましょう。(今気づいたけどPiApproximationはPiMessage継承してないけどいいのかな&hellip;一応動いちゃいるけども)</p>

<p><code>scala
sealed trait PiMessage
case object Calculate extends PiMessage
case class Work(start: Int, nrOfElements: Int) extends PiMessage
case class Result(value: Double) extends PiMessage
case class PiApproximation(pi: Double, duration: Duration)
</code></p>

<p>上記ではπの計算に使うメッセージを定義しています。パターンマッチで使うので<code>case class</code>で宣言しているようです。
それぞれのメッセージはそれぞれ次のActor間で使用されます。</p>

<table>
<thead>
<tr>
<th> </th>
<th> Actor        </th>
<th align="center"> 役割           </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td> </td>
<td> Worker      </td>
<td align="center"> 実際に計算を行なう</td>
<td></td>
</tr>
<tr>
<td> </td>
<td> Master      </td>
<td align="center"> 処理の起点、Workerの計算結果をまとめる</td>
<td>  </td>
</tr>
<tr>
<td> </td>
<td> Listener    </td>
<td align="center"> 結果をprintする      </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>こちらがActorの定義です。</p>

<p>```scala</p>

<p>class Worker extends Actor {</p>

<p> def calculatePiFor(start:Int, nrOfElements:Int):Double = {
   var acc = 0.0
   for (i &lt;&ndash; start until (start+nrOfElements))</p>

<pre><code> acc += 4.0 * (1- (i%2) * 2) / (2 * i + 1)
</code></pre>

<p>   acc
 }
 def receive = {
  case Work(start, nrOfElements) =>
   sender ! Result(calculatePiFor(start,nrOfElements))
  }
}
```</p>

<p>各ActorはActorクラスを継承して定義します。
注目して欲しいのがreceiveメソッドです。receiveメソッドはそのActorがなんらかのメッセージを受け取った時に呼ばれるメソッドです。パターンマッチを使用でき、
メッセージの種類に応じて処理を変えることができます。</p>

<p>メッセージの送信は、<code>!</code>を使って</p>

<p><code>scala
master ! culculate
</code></p>

<p>のように行います。master Actorにculculateメッセージを送るという意味です。</p>

<p>メッセージを受け取ってから処理を送信者へ返す場合は<code>sender</code>が予約されているのでそれを使いましょう。</p>

<p>ちなみにメッセージは無理に定義しなくてもIntとかStringとかも使えるようです。</p>

<h2>ルータ</h2>

<p>Master内でこのルータを宣言しています。ルータはそれぞれのWorkerに等しい量のタスクを振り分けるのに使われているようです。</p>

<p>この辺はもうちょっと勉強がいりますが、要はMasterがWorkerを作り各Workerに処理を振り分けているということだと思います。</p>

<p>```scala
class Master(nrOfWorkers: Int, nrOfMessages: Int, nrOfElements: Int, listener: ActorRef) extends Actor {
  var pi: Double = _
  var nrOfResults: Int = _
  val start: Long = System.currentTimeMillis</p>

<p>  val workerRouter = context.actorOf(Props[Worker].withRouter(RoundRobinRouter(nrOfWorkers)), name = &ldquo;workerRouter&rdquo;)</p>

<pre><code>def receive = {
// handle messages ...
</code></pre>

<p>  }</p>

<p>}</p>

<p>```</p>

<h2>全体の流れ</h2>

<p>全体の流れはこんな感じです。</p>

<ol>
<li>処理に必要なActorを定義する(今回はMaster,Worker,Listener)</li>
<li>Actor間のやりとりに必要なメッセージを定義する</li>
<li>Masterが処理の起点、各Workerの処理を割り振る</li>
<li>Workerの処理が全て終わったら結果をマージ、Listenerへ投げる</li>
<li>Listenerで結果表示(Listenerってなんでいるんだろう&hellip;?）</li>
</ol>


<p>以下が全ソースコードです。</p>

<p>```scala</p>

<p>import akka.actor.<em>
import akka.routing.</em></p>

<p>sealed trait PiMessage
case object Calculate extends PiMessage
case class Work(start:Int, nrOfElements:Int) extends PiMessage
case class Result(value:Double) extends PiMessage
case class PiApproximation(pi:Double, duration:Long)</p>

<p>class Worker extends Actor {</p>

<p>  def calculatePiFor(start:Int, nrOfElements:Int):Double = {</p>

<pre><code>var acc = 0.0
for (i &lt;- start until (start+nrOfElements))
  acc += 4.0 * (1- (i%2) * 2) / (2 * i + 1)
acc
</code></pre>

<p>  }
  def receive = {</p>

<pre><code>case Work(start, nrOfElements) =&gt;
  sender ! Result(calculatePiFor(start,nrOfElements))
</code></pre>

<p>  }
}</p>

<p>class Master(nrOfWorkers:Int,nrOfMessages:Int, nrOfElements:Int, Listener:ActorRef) extends Actor {
  var pi:Double = _
  var nrOfResults:Int = _
  val start:Long = System.currentTimeMillis</p>

<p>  val workersRouter = context.actorOf(Props[Worker].withRouter(RoundRobinRouter(nrOfWorkers)), name = &ldquo;workersRouter&rdquo;)</p>

<p>  def receive = {</p>

<pre><code>case Calculate =&gt;
  for (i &lt;- 0 until nrOfMessages) workersRouter ! Work(i * nrOfElements, nrOfElements)
case Result(value) =&gt;
  pi += value
  nrOfResults += 1
  if (nrOfResults == nrOfMessages) {
    Listener ! PiApproximation(pi, duration = (System.currentTimeMillis- start))
    context.stop(self)
  }
</code></pre>

<p>  }
}</p>

<p>class Listener extends Actor {
  def receive = {</p>

<pre><code>case PiApproximation(pi, duration) =&gt;
  println("Pi approximation: %s\nCalculation time: %s".format(pi,duration))
  context.system.shutdown()
</code></pre>

<p>  }
}
object AkkatestApp{
  def main(args:Array[String]):Unit  = {</p>

<pre><code>val input = readLine("1:sequence 2:parallel\n")
if (input == "1")
  calculate(nrOfWorkers = 1, nrOfElements = 10000, nrOfMessages = 10000)
else if (input == "2")
  calculate(nrOfWorkers = 4, nrOfElements = 10000, nrOfMessages = 10000)
else 
  println("wrong num")
</code></pre>

<p>  }
  def calculate(nrOfWorkers:Int, nrOfElements:Int, nrOfMessages:Int) {</p>

<pre><code>val system = ActorSystem("PiSystem")

val listener = system.actorOf(Props[Listener], name = "listener")

val master = system.actorOf(Props(new Master(nrOfWorkers, nrOfMessages, nrOfElements, listener)), name = "master")

master ! Calculate
</code></pre>

<p>  }
}</p>

<p>```</p>

<h2>まとめ</h2>

<p>こちらが今回参考にさせていただいたサイトです。</p>

<p><a href="http://labs.enrapt.jp/2013/03/scalaakka.html">SclaのAkka入門</a></p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1209/06/news134.html">Scalaの並行処理とアクター、並列コレクション</a></p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1209/06/news134.html">Scala + akka で簡単なチャットサーバを書いてみたので開設してみるよ</a></p>

<p><a href="http://tuvistavie.com/posts/6-getting-started-with-scala-akka-actors?locale=ja">Scalaのakka actorsを使いはじめる</a></p>

<p>まだまだakkaの入り口に立った程度ですがこの程度のことでも情報がなくてかなり時間がかかってしまった&hellip;</p>

<p>もっと頑張って勉強します！！</p>
]]></content>
  </entry>
  
</feed>
